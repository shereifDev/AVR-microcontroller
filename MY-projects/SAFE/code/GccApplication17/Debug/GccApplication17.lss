
GccApplication17.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000de8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000072  00800060  00000de8  00000e5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000ed0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000100  00000000  00000000  00001628  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000102c  00000000  00000000  00001728  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000559  00000000  00000000  00002754  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a1b  00000000  00000000  00002cad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a0  00000000  00000000  000036c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e9  00000000  00000000  00003968  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000be9  00000000  00000000  00003c51  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  0000483a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ee       	ldi	r30, 0xE8	; 232
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3d       	cpi	r26, 0xD2	; 210
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 ed       	ldi	r26, 0xD2	; 210
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3d       	cpi	r26, 0xD2	; 210
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4b 04 	call	0x896	; 0x896 <main>
  8a:	0c 94 f2 06 	jmp	0xde4	; 0xde4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <setPinDIr>:
#include "STD_macros.h"


void setPinDIr(char port , char pin , char dir)
{
	switch (port)
  92:	84 34       	cpi	r24, 0x44	; 68
  94:	09 f4       	brne	.+2      	; 0x98 <setPinDIr+0x6>
  96:	71 c0       	rjmp	.+226    	; 0x17a <setPinDIr+0xe8>
  98:	85 34       	cpi	r24, 0x45	; 69
  9a:	48 f4       	brcc	.+18     	; 0xae <setPinDIr+0x1c>
  9c:	82 34       	cpi	r24, 0x42	; 66
  9e:	99 f1       	breq	.+102    	; 0x106 <setPinDIr+0x74>
  a0:	83 34       	cpi	r24, 0x43	; 67
  a2:	08 f0       	brcs	.+2      	; 0xa6 <setPinDIr+0x14>
  a4:	4d c0       	rjmp	.+154    	; 0x140 <setPinDIr+0xae>
  a6:	81 34       	cpi	r24, 0x41	; 65
  a8:	09 f0       	breq	.+2      	; 0xac <setPinDIr+0x1a>
  aa:	83 c0       	rjmp	.+262    	; 0x1b2 <setPinDIr+0x120>
  ac:	0f c0       	rjmp	.+30     	; 0xcc <setPinDIr+0x3a>
  ae:	82 36       	cpi	r24, 0x62	; 98
  b0:	51 f1       	breq	.+84     	; 0x106 <setPinDIr+0x74>
  b2:	83 36       	cpi	r24, 0x63	; 99
  b4:	20 f4       	brcc	.+8      	; 0xbe <setPinDIr+0x2c>
  b6:	81 36       	cpi	r24, 0x61	; 97
  b8:	09 f0       	breq	.+2      	; 0xbc <setPinDIr+0x2a>
  ba:	7b c0       	rjmp	.+246    	; 0x1b2 <setPinDIr+0x120>
  bc:	07 c0       	rjmp	.+14     	; 0xcc <setPinDIr+0x3a>
  be:	83 36       	cpi	r24, 0x63	; 99
  c0:	09 f4       	brne	.+2      	; 0xc4 <setPinDIr+0x32>
  c2:	3e c0       	rjmp	.+124    	; 0x140 <setPinDIr+0xae>
  c4:	84 36       	cpi	r24, 0x64	; 100
  c6:	09 f0       	breq	.+2      	; 0xca <setPinDIr+0x38>
  c8:	74 c0       	rjmp	.+232    	; 0x1b2 <setPinDIr+0x120>
  ca:	57 c0       	rjmp	.+174    	; 0x17a <setPinDIr+0xe8>
	{
		case 'A':
		case 'a':
		if (dir==1)
  cc:	41 30       	cpi	r20, 0x01	; 1
  ce:	69 f4       	brne	.+26     	; 0xea <setPinDIr+0x58>
		{
			SET_BIT(DDRA,pin) ;
  d0:	2a b3       	in	r18, 0x1a	; 26
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	ac 01       	movw	r20, r24
  d8:	02 c0       	rjmp	.+4      	; 0xde <setPinDIr+0x4c>
  da:	44 0f       	add	r20, r20
  dc:	55 1f       	adc	r21, r21
  de:	6a 95       	dec	r22
  e0:	e2 f7       	brpl	.-8      	; 0xda <setPinDIr+0x48>
  e2:	ba 01       	movw	r22, r20
  e4:	62 2b       	or	r22, r18
  e6:	6a bb       	out	0x1a, r22	; 26
  e8:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRA,pin);
  ea:	2a b3       	in	r18, 0x1a	; 26
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	ac 01       	movw	r20, r24
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <setPinDIr+0x66>
  f4:	44 0f       	add	r20, r20
  f6:	55 1f       	adc	r21, r21
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <setPinDIr+0x62>
  fc:	ba 01       	movw	r22, r20
  fe:	60 95       	com	r22
 100:	62 23       	and	r22, r18
 102:	6a bb       	out	0x1a, r22	; 26
 104:	08 95       	ret
		}
		break;
		
		case 'B':
		case 'b':
		if (dir==1)
 106:	41 30       	cpi	r20, 0x01	; 1
 108:	69 f4       	brne	.+26     	; 0x124 <setPinDIr+0x92>
		{
			SET_BIT(DDRB,pin) ;
 10a:	27 b3       	in	r18, 0x17	; 23
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	ac 01       	movw	r20, r24
 112:	02 c0       	rjmp	.+4      	; 0x118 <setPinDIr+0x86>
 114:	44 0f       	add	r20, r20
 116:	55 1f       	adc	r21, r21
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <setPinDIr+0x82>
 11c:	ba 01       	movw	r22, r20
 11e:	62 2b       	or	r22, r18
 120:	67 bb       	out	0x17, r22	; 23
 122:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pin);
 124:	27 b3       	in	r18, 0x17	; 23
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	ac 01       	movw	r20, r24
 12c:	02 c0       	rjmp	.+4      	; 0x132 <setPinDIr+0xa0>
 12e:	44 0f       	add	r20, r20
 130:	55 1f       	adc	r21, r21
 132:	6a 95       	dec	r22
 134:	e2 f7       	brpl	.-8      	; 0x12e <setPinDIr+0x9c>
 136:	ba 01       	movw	r22, r20
 138:	60 95       	com	r22
 13a:	62 23       	and	r22, r18
 13c:	67 bb       	out	0x17, r22	; 23
 13e:	08 95       	ret
		break;
		
		
		case 'C':
		case 'c':
		if (dir==1)
 140:	41 30       	cpi	r20, 0x01	; 1
 142:	69 f4       	brne	.+26     	; 0x15e <setPinDIr+0xcc>
		{
			SET_BIT(DDRC,pin) ;
 144:	24 b3       	in	r18, 0x14	; 20
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	ac 01       	movw	r20, r24
 14c:	02 c0       	rjmp	.+4      	; 0x152 <setPinDIr+0xc0>
 14e:	44 0f       	add	r20, r20
 150:	55 1f       	adc	r21, r21
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <setPinDIr+0xbc>
 156:	ba 01       	movw	r22, r20
 158:	62 2b       	or	r22, r18
 15a:	64 bb       	out	0x14, r22	; 20
 15c:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pin);
 15e:	24 b3       	in	r18, 0x14	; 20
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	ac 01       	movw	r20, r24
 166:	02 c0       	rjmp	.+4      	; 0x16c <setPinDIr+0xda>
 168:	44 0f       	add	r20, r20
 16a:	55 1f       	adc	r21, r21
 16c:	6a 95       	dec	r22
 16e:	e2 f7       	brpl	.-8      	; 0x168 <setPinDIr+0xd6>
 170:	ba 01       	movw	r22, r20
 172:	60 95       	com	r22
 174:	62 23       	and	r22, r18
 176:	64 bb       	out	0x14, r22	; 20
 178:	08 95       	ret
		break;
		
		
		case 'D':
		case 'd':
		if (dir==1)
 17a:	41 30       	cpi	r20, 0x01	; 1
 17c:	69 f4       	brne	.+26     	; 0x198 <setPinDIr+0x106>
		{
			SET_BIT(DDRD,pin) ;
 17e:	21 b3       	in	r18, 0x11	; 17
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	ac 01       	movw	r20, r24
 186:	02 c0       	rjmp	.+4      	; 0x18c <setPinDIr+0xfa>
 188:	44 0f       	add	r20, r20
 18a:	55 1f       	adc	r21, r21
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <setPinDIr+0xf6>
 190:	ba 01       	movw	r22, r20
 192:	62 2b       	or	r22, r18
 194:	61 bb       	out	0x11, r22	; 17
 196:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pin);
 198:	21 b3       	in	r18, 0x11	; 17
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	ac 01       	movw	r20, r24
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <setPinDIr+0x114>
 1a2:	44 0f       	add	r20, r20
 1a4:	55 1f       	adc	r21, r21
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <setPinDIr+0x110>
 1aa:	ba 01       	movw	r22, r20
 1ac:	60 95       	com	r22
 1ae:	62 23       	and	r22, r18
 1b0:	61 bb       	out	0x11, r22	; 17
 1b2:	08 95       	ret

000001b4 <writePIn>:

//--------------------------------------------------------------------------------------------------------------------------------

void writePIn (char port , char pin , char value)
{
	switch (port)
 1b4:	84 34       	cpi	r24, 0x44	; 68
 1b6:	09 f4       	brne	.+2      	; 0x1ba <writePIn+0x6>
 1b8:	71 c0       	rjmp	.+226    	; 0x29c <writePIn+0xe8>
 1ba:	85 34       	cpi	r24, 0x45	; 69
 1bc:	48 f4       	brcc	.+18     	; 0x1d0 <writePIn+0x1c>
 1be:	82 34       	cpi	r24, 0x42	; 66
 1c0:	99 f1       	breq	.+102    	; 0x228 <writePIn+0x74>
 1c2:	83 34       	cpi	r24, 0x43	; 67
 1c4:	08 f0       	brcs	.+2      	; 0x1c8 <writePIn+0x14>
 1c6:	4d c0       	rjmp	.+154    	; 0x262 <writePIn+0xae>
 1c8:	81 34       	cpi	r24, 0x41	; 65
 1ca:	09 f0       	breq	.+2      	; 0x1ce <writePIn+0x1a>
 1cc:	83 c0       	rjmp	.+262    	; 0x2d4 <writePIn+0x120>
 1ce:	0f c0       	rjmp	.+30     	; 0x1ee <writePIn+0x3a>
 1d0:	82 36       	cpi	r24, 0x62	; 98
 1d2:	51 f1       	breq	.+84     	; 0x228 <writePIn+0x74>
 1d4:	83 36       	cpi	r24, 0x63	; 99
 1d6:	20 f4       	brcc	.+8      	; 0x1e0 <writePIn+0x2c>
 1d8:	81 36       	cpi	r24, 0x61	; 97
 1da:	09 f0       	breq	.+2      	; 0x1de <writePIn+0x2a>
 1dc:	7b c0       	rjmp	.+246    	; 0x2d4 <writePIn+0x120>
 1de:	07 c0       	rjmp	.+14     	; 0x1ee <writePIn+0x3a>
 1e0:	83 36       	cpi	r24, 0x63	; 99
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <writePIn+0x32>
 1e4:	3e c0       	rjmp	.+124    	; 0x262 <writePIn+0xae>
 1e6:	84 36       	cpi	r24, 0x64	; 100
 1e8:	09 f0       	breq	.+2      	; 0x1ec <writePIn+0x38>
 1ea:	74 c0       	rjmp	.+232    	; 0x2d4 <writePIn+0x120>
 1ec:	57 c0       	rjmp	.+174    	; 0x29c <writePIn+0xe8>
	{
		case 'A':
		case 'a':
		if (value==1)
 1ee:	41 30       	cpi	r20, 0x01	; 1
 1f0:	69 f4       	brne	.+26     	; 0x20c <writePIn+0x58>
		{
			SET_BIT(PORTA,pin) ;
 1f2:	2b b3       	in	r18, 0x1b	; 27
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	ac 01       	movw	r20, r24
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <writePIn+0x4c>
 1fc:	44 0f       	add	r20, r20
 1fe:	55 1f       	adc	r21, r21
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <writePIn+0x48>
 204:	ba 01       	movw	r22, r20
 206:	62 2b       	or	r22, r18
 208:	6b bb       	out	0x1b, r22	; 27
 20a:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pin);
 20c:	2b b3       	in	r18, 0x1b	; 27
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	ac 01       	movw	r20, r24
 214:	02 c0       	rjmp	.+4      	; 0x21a <writePIn+0x66>
 216:	44 0f       	add	r20, r20
 218:	55 1f       	adc	r21, r21
 21a:	6a 95       	dec	r22
 21c:	e2 f7       	brpl	.-8      	; 0x216 <writePIn+0x62>
 21e:	ba 01       	movw	r22, r20
 220:	60 95       	com	r22
 222:	62 23       	and	r22, r18
 224:	6b bb       	out	0x1b, r22	; 27
 226:	08 95       	ret
		}
		break;
		
		case 'B':
		case 'b':
		if (value==1)
 228:	41 30       	cpi	r20, 0x01	; 1
 22a:	69 f4       	brne	.+26     	; 0x246 <writePIn+0x92>
		{
			SET_BIT(PORTB,pin) ;
 22c:	28 b3       	in	r18, 0x18	; 24
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	ac 01       	movw	r20, r24
 234:	02 c0       	rjmp	.+4      	; 0x23a <writePIn+0x86>
 236:	44 0f       	add	r20, r20
 238:	55 1f       	adc	r21, r21
 23a:	6a 95       	dec	r22
 23c:	e2 f7       	brpl	.-8      	; 0x236 <writePIn+0x82>
 23e:	ba 01       	movw	r22, r20
 240:	62 2b       	or	r22, r18
 242:	68 bb       	out	0x18, r22	; 24
 244:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pin);
 246:	28 b3       	in	r18, 0x18	; 24
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	ac 01       	movw	r20, r24
 24e:	02 c0       	rjmp	.+4      	; 0x254 <writePIn+0xa0>
 250:	44 0f       	add	r20, r20
 252:	55 1f       	adc	r21, r21
 254:	6a 95       	dec	r22
 256:	e2 f7       	brpl	.-8      	; 0x250 <writePIn+0x9c>
 258:	ba 01       	movw	r22, r20
 25a:	60 95       	com	r22
 25c:	62 23       	and	r22, r18
 25e:	68 bb       	out	0x18, r22	; 24
 260:	08 95       	ret
		break;
		
		
		case 'C':
		case 'c':
		if (value==1)
 262:	41 30       	cpi	r20, 0x01	; 1
 264:	69 f4       	brne	.+26     	; 0x280 <writePIn+0xcc>
		{
			SET_BIT(PORTC,pin) ;
 266:	25 b3       	in	r18, 0x15	; 21
 268:	81 e0       	ldi	r24, 0x01	; 1
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	ac 01       	movw	r20, r24
 26e:	02 c0       	rjmp	.+4      	; 0x274 <writePIn+0xc0>
 270:	44 0f       	add	r20, r20
 272:	55 1f       	adc	r21, r21
 274:	6a 95       	dec	r22
 276:	e2 f7       	brpl	.-8      	; 0x270 <writePIn+0xbc>
 278:	ba 01       	movw	r22, r20
 27a:	62 2b       	or	r22, r18
 27c:	65 bb       	out	0x15, r22	; 21
 27e:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pin);
 280:	25 b3       	in	r18, 0x15	; 21
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	ac 01       	movw	r20, r24
 288:	02 c0       	rjmp	.+4      	; 0x28e <writePIn+0xda>
 28a:	44 0f       	add	r20, r20
 28c:	55 1f       	adc	r21, r21
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <writePIn+0xd6>
 292:	ba 01       	movw	r22, r20
 294:	60 95       	com	r22
 296:	62 23       	and	r22, r18
 298:	65 bb       	out	0x15, r22	; 21
 29a:	08 95       	ret
		break;
		
		
		case 'D':
		case 'd':
		if (value==1)
 29c:	41 30       	cpi	r20, 0x01	; 1
 29e:	69 f4       	brne	.+26     	; 0x2ba <writePIn+0x106>
		{
			SET_BIT(PORTD,pin) ;
 2a0:	22 b3       	in	r18, 0x12	; 18
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	ac 01       	movw	r20, r24
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <writePIn+0xfa>
 2aa:	44 0f       	add	r20, r20
 2ac:	55 1f       	adc	r21, r21
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <writePIn+0xf6>
 2b2:	ba 01       	movw	r22, r20
 2b4:	62 2b       	or	r22, r18
 2b6:	62 bb       	out	0x12, r22	; 18
 2b8:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pin);
 2ba:	22 b3       	in	r18, 0x12	; 18
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	ac 01       	movw	r20, r24
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <writePIn+0x114>
 2c4:	44 0f       	add	r20, r20
 2c6:	55 1f       	adc	r21, r21
 2c8:	6a 95       	dec	r22
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <writePIn+0x110>
 2cc:	ba 01       	movw	r22, r20
 2ce:	60 95       	com	r22
 2d0:	62 23       	and	r22, r18
 2d2:	62 bb       	out	0x12, r22	; 18
 2d4:	08 95       	ret

000002d6 <readPin>:
//--------------------------------------------------------------------------------------------------------------------------------

char readPin (char port , char pin)
{
	char x=0 ;
	switch(port)
 2d6:	84 34       	cpi	r24, 0x44	; 68
 2d8:	09 f4       	brne	.+2      	; 0x2dc <readPin+0x6>
 2da:	4e c0       	rjmp	.+156    	; 0x378 <readPin+0xa2>
 2dc:	85 34       	cpi	r24, 0x45	; 69
 2de:	40 f4       	brcc	.+16     	; 0x2f0 <readPin+0x1a>
 2e0:	82 34       	cpi	r24, 0x42	; 66
 2e2:	31 f1       	breq	.+76     	; 0x330 <readPin+0x5a>
 2e4:	83 34       	cpi	r24, 0x43	; 67
 2e6:	b0 f5       	brcc	.+108    	; 0x354 <readPin+0x7e>
 2e8:	81 34       	cpi	r24, 0x41	; 65
 2ea:	09 f0       	breq	.+2      	; 0x2ee <readPin+0x18>
 2ec:	57 c0       	rjmp	.+174    	; 0x39c <readPin+0xc6>
 2ee:	0e c0       	rjmp	.+28     	; 0x30c <readPin+0x36>
 2f0:	82 36       	cpi	r24, 0x62	; 98
 2f2:	f1 f0       	breq	.+60     	; 0x330 <readPin+0x5a>
 2f4:	83 36       	cpi	r24, 0x63	; 99
 2f6:	20 f4       	brcc	.+8      	; 0x300 <readPin+0x2a>
 2f8:	81 36       	cpi	r24, 0x61	; 97
 2fa:	09 f0       	breq	.+2      	; 0x2fe <readPin+0x28>
 2fc:	4f c0       	rjmp	.+158    	; 0x39c <readPin+0xc6>
 2fe:	06 c0       	rjmp	.+12     	; 0x30c <readPin+0x36>
 300:	83 36       	cpi	r24, 0x63	; 99
 302:	41 f1       	breq	.+80     	; 0x354 <readPin+0x7e>
 304:	84 36       	cpi	r24, 0x64	; 100
 306:	09 f0       	breq	.+2      	; 0x30a <readPin+0x34>
 308:	49 c0       	rjmp	.+146    	; 0x39c <readPin+0xc6>
 30a:	36 c0       	rjmp	.+108    	; 0x378 <readPin+0xa2>
	{
		case 'A':
		case 'a':
		x = READ_BIT(PINA,pin);
 30c:	29 b3       	in	r18, 0x19	; 25
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	06 2e       	mov	r0, r22
 314:	02 c0       	rjmp	.+4      	; 0x31a <readPin+0x44>
 316:	88 0f       	add	r24, r24
 318:	99 1f       	adc	r25, r25
 31a:	0a 94       	dec	r0
 31c:	e2 f7       	brpl	.-8      	; 0x316 <readPin+0x40>
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	82 23       	and	r24, r18
 322:	93 23       	and	r25, r19
 324:	02 c0       	rjmp	.+4      	; 0x32a <readPin+0x54>
 326:	95 95       	asr	r25
 328:	87 95       	ror	r24
 32a:	6a 95       	dec	r22
 32c:	e2 f7       	brpl	.-8      	; 0x326 <readPin+0x50>
		break;
 32e:	08 95       	ret
		
		case 'B':
		case 'b':
		x = READ_BIT(PINB,pin);
 330:	26 b3       	in	r18, 0x16	; 22
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	06 2e       	mov	r0, r22
 338:	02 c0       	rjmp	.+4      	; 0x33e <readPin+0x68>
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	0a 94       	dec	r0
 340:	e2 f7       	brpl	.-8      	; 0x33a <readPin+0x64>
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	82 23       	and	r24, r18
 346:	93 23       	and	r25, r19
 348:	02 c0       	rjmp	.+4      	; 0x34e <readPin+0x78>
 34a:	95 95       	asr	r25
 34c:	87 95       	ror	r24
 34e:	6a 95       	dec	r22
 350:	e2 f7       	brpl	.-8      	; 0x34a <readPin+0x74>
		break;
 352:	08 95       	ret
		
		case 'C':
		case 'c':
		x = READ_BIT(PINC,pin);
 354:	23 b3       	in	r18, 0x13	; 19
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	90 e0       	ldi	r25, 0x00	; 0
 35a:	06 2e       	mov	r0, r22
 35c:	02 c0       	rjmp	.+4      	; 0x362 <readPin+0x8c>
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	0a 94       	dec	r0
 364:	e2 f7       	brpl	.-8      	; 0x35e <readPin+0x88>
 366:	30 e0       	ldi	r19, 0x00	; 0
 368:	82 23       	and	r24, r18
 36a:	93 23       	and	r25, r19
 36c:	02 c0       	rjmp	.+4      	; 0x372 <readPin+0x9c>
 36e:	95 95       	asr	r25
 370:	87 95       	ror	r24
 372:	6a 95       	dec	r22
 374:	e2 f7       	brpl	.-8      	; 0x36e <readPin+0x98>
		break;
 376:	08 95       	ret
		
		case 'D':
		case 'd':
		x = READ_BIT(PIND,pin);
 378:	20 b3       	in	r18, 0x10	; 16
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	06 2e       	mov	r0, r22
 380:	02 c0       	rjmp	.+4      	; 0x386 <readPin+0xb0>
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	0a 94       	dec	r0
 388:	e2 f7       	brpl	.-8      	; 0x382 <readPin+0xac>
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	82 23       	and	r24, r18
 38e:	93 23       	and	r25, r19
 390:	02 c0       	rjmp	.+4      	; 0x396 <readPin+0xc0>
 392:	95 95       	asr	r25
 394:	87 95       	ror	r24
 396:	6a 95       	dec	r22
 398:	e2 f7       	brpl	.-8      	; 0x392 <readPin+0xbc>
		break;	
 39a:	08 95       	ret

//--------------------------------------------------------------------------------------------------------------------------------

char readPin (char port , char pin)
{
	char x=0 ;
 39c:	80 e0       	ldi	r24, 0x00	; 0
		x = READ_BIT(PIND,pin);
		break;	
	}
	
	return x;
}
 39e:	08 95       	ret

000003a0 <togglePin>:

//--------------------------------------------------------------------------------------------------------------------------------

void togglePin (char port , char pin)
{
	switch(port)
 3a0:	84 34       	cpi	r24, 0x44	; 68
 3a2:	09 f4       	brne	.+2      	; 0x3a6 <togglePin+0x6>
 3a4:	3d c0       	rjmp	.+122    	; 0x420 <togglePin+0x80>
 3a6:	85 34       	cpi	r24, 0x45	; 69
 3a8:	40 f4       	brcc	.+16     	; 0x3ba <togglePin+0x1a>
 3aa:	82 34       	cpi	r24, 0x42	; 66
 3ac:	f9 f0       	breq	.+62     	; 0x3ec <togglePin+0x4c>
 3ae:	83 34       	cpi	r24, 0x43	; 67
 3b0:	50 f5       	brcc	.+84     	; 0x406 <togglePin+0x66>
 3b2:	81 34       	cpi	r24, 0x41	; 65
 3b4:	09 f0       	breq	.+2      	; 0x3b8 <togglePin+0x18>
 3b6:	40 c0       	rjmp	.+128    	; 0x438 <togglePin+0x98>
 3b8:	0c c0       	rjmp	.+24     	; 0x3d2 <togglePin+0x32>
 3ba:	82 36       	cpi	r24, 0x62	; 98
 3bc:	b9 f0       	breq	.+46     	; 0x3ec <togglePin+0x4c>
 3be:	83 36       	cpi	r24, 0x63	; 99
 3c0:	18 f4       	brcc	.+6      	; 0x3c8 <togglePin+0x28>
 3c2:	81 36       	cpi	r24, 0x61	; 97
 3c4:	c9 f5       	brne	.+114    	; 0x438 <togglePin+0x98>
 3c6:	05 c0       	rjmp	.+10     	; 0x3d2 <togglePin+0x32>
 3c8:	83 36       	cpi	r24, 0x63	; 99
 3ca:	e9 f0       	breq	.+58     	; 0x406 <togglePin+0x66>
 3cc:	84 36       	cpi	r24, 0x64	; 100
 3ce:	a1 f5       	brne	.+104    	; 0x438 <togglePin+0x98>
 3d0:	27 c0       	rjmp	.+78     	; 0x420 <togglePin+0x80>
	{
		case 'A':
		case 'a':
		TOGG_BIT(PORTA,pin);
 3d2:	2b b3       	in	r18, 0x1b	; 27
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 e0       	ldi	r25, 0x00	; 0
 3d8:	ac 01       	movw	r20, r24
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <togglePin+0x40>
 3dc:	44 0f       	add	r20, r20
 3de:	55 1f       	adc	r21, r21
 3e0:	6a 95       	dec	r22
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <togglePin+0x3c>
 3e4:	ba 01       	movw	r22, r20
 3e6:	62 27       	eor	r22, r18
 3e8:	6b bb       	out	0x1b, r22	; 27
		break;
 3ea:	08 95       	ret
		
		case 'B':
		case 'b':
		TOGG_BIT(PORTB,pin);
 3ec:	28 b3       	in	r18, 0x18	; 24
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	ac 01       	movw	r20, r24
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <togglePin+0x5a>
 3f6:	44 0f       	add	r20, r20
 3f8:	55 1f       	adc	r21, r21
 3fa:	6a 95       	dec	r22
 3fc:	e2 f7       	brpl	.-8      	; 0x3f6 <togglePin+0x56>
 3fe:	ba 01       	movw	r22, r20
 400:	62 27       	eor	r22, r18
 402:	68 bb       	out	0x18, r22	; 24
		break;
 404:	08 95       	ret
		
		case 'C':
		case 'c':
		TOGG_BIT(PORTC,pin);
 406:	25 b3       	in	r18, 0x15	; 21
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	ac 01       	movw	r20, r24
 40e:	02 c0       	rjmp	.+4      	; 0x414 <togglePin+0x74>
 410:	44 0f       	add	r20, r20
 412:	55 1f       	adc	r21, r21
 414:	6a 95       	dec	r22
 416:	e2 f7       	brpl	.-8      	; 0x410 <togglePin+0x70>
 418:	ba 01       	movw	r22, r20
 41a:	62 27       	eor	r22, r18
 41c:	65 bb       	out	0x15, r22	; 21
		break;
 41e:	08 95       	ret
		
		case 'D':
		case 'd':
		TOGG_BIT(PORTD,pin);
 420:	22 b3       	in	r18, 0x12	; 18
 422:	81 e0       	ldi	r24, 0x01	; 1
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	ac 01       	movw	r20, r24
 428:	02 c0       	rjmp	.+4      	; 0x42e <togglePin+0x8e>
 42a:	44 0f       	add	r20, r20
 42c:	55 1f       	adc	r21, r21
 42e:	6a 95       	dec	r22
 430:	e2 f7       	brpl	.-8      	; 0x42a <togglePin+0x8a>
 432:	ba 01       	movw	r22, r20
 434:	62 27       	eor	r22, r18
 436:	62 bb       	out	0x12, r22	; 18
 438:	08 95       	ret

0000043a <setPortDir>:

//--------------------------------------------------------------------------------------------------------------------------------

void setPortDir(char port , char dir)
{
	switch(port)
 43a:	84 34       	cpi	r24, 0x44	; 68
 43c:	d9 f0       	breq	.+54     	; 0x474 <setPortDir+0x3a>
 43e:	85 34       	cpi	r24, 0x45	; 69
 440:	38 f4       	brcc	.+14     	; 0x450 <setPortDir+0x16>
 442:	82 34       	cpi	r24, 0x42	; 66
 444:	99 f0       	breq	.+38     	; 0x46c <setPortDir+0x32>
 446:	83 34       	cpi	r24, 0x43	; 67
 448:	98 f4       	brcc	.+38     	; 0x470 <setPortDir+0x36>
 44a:	81 34       	cpi	r24, 0x41	; 65
 44c:	a1 f4       	brne	.+40     	; 0x476 <setPortDir+0x3c>
 44e:	0c c0       	rjmp	.+24     	; 0x468 <setPortDir+0x2e>
 450:	82 36       	cpi	r24, 0x62	; 98
 452:	61 f0       	breq	.+24     	; 0x46c <setPortDir+0x32>
 454:	83 36       	cpi	r24, 0x63	; 99
 456:	18 f4       	brcc	.+6      	; 0x45e <setPortDir+0x24>
 458:	81 36       	cpi	r24, 0x61	; 97
 45a:	69 f4       	brne	.+26     	; 0x476 <setPortDir+0x3c>
 45c:	05 c0       	rjmp	.+10     	; 0x468 <setPortDir+0x2e>
 45e:	83 36       	cpi	r24, 0x63	; 99
 460:	39 f0       	breq	.+14     	; 0x470 <setPortDir+0x36>
 462:	84 36       	cpi	r24, 0x64	; 100
 464:	41 f4       	brne	.+16     	; 0x476 <setPortDir+0x3c>
 466:	06 c0       	rjmp	.+12     	; 0x474 <setPortDir+0x3a>
	{
		case 'A':
		case 'a':
		DDRA = dir;
 468:	6a bb       	out	0x1a, r22	; 26
		break;
 46a:	08 95       	ret
		
		case 'B':
		case 'b':
		DDRB = dir;
 46c:	67 bb       	out	0x17, r22	; 23
		break;
 46e:	08 95       	ret
		
		case 'C':
		case 'c':
		DDRC = dir;
 470:	64 bb       	out	0x14, r22	; 20
		break;
 472:	08 95       	ret
		
		case 'D':
		case 'd':
		DDRD = dir;
 474:	61 bb       	out	0x11, r22	; 17
 476:	08 95       	ret

00000478 <writePort>:

//--------------------------------------------------------------------------------------------------------------------------------

void writePort(char port , char value)
{
	switch(port)
 478:	84 34       	cpi	r24, 0x44	; 68
 47a:	d9 f0       	breq	.+54     	; 0x4b2 <writePort+0x3a>
 47c:	85 34       	cpi	r24, 0x45	; 69
 47e:	38 f4       	brcc	.+14     	; 0x48e <writePort+0x16>
 480:	82 34       	cpi	r24, 0x42	; 66
 482:	99 f0       	breq	.+38     	; 0x4aa <writePort+0x32>
 484:	83 34       	cpi	r24, 0x43	; 67
 486:	98 f4       	brcc	.+38     	; 0x4ae <writePort+0x36>
 488:	81 34       	cpi	r24, 0x41	; 65
 48a:	a1 f4       	brne	.+40     	; 0x4b4 <writePort+0x3c>
 48c:	0c c0       	rjmp	.+24     	; 0x4a6 <writePort+0x2e>
 48e:	82 36       	cpi	r24, 0x62	; 98
 490:	61 f0       	breq	.+24     	; 0x4aa <writePort+0x32>
 492:	83 36       	cpi	r24, 0x63	; 99
 494:	18 f4       	brcc	.+6      	; 0x49c <writePort+0x24>
 496:	81 36       	cpi	r24, 0x61	; 97
 498:	69 f4       	brne	.+26     	; 0x4b4 <writePort+0x3c>
 49a:	05 c0       	rjmp	.+10     	; 0x4a6 <writePort+0x2e>
 49c:	83 36       	cpi	r24, 0x63	; 99
 49e:	39 f0       	breq	.+14     	; 0x4ae <writePort+0x36>
 4a0:	84 36       	cpi	r24, 0x64	; 100
 4a2:	41 f4       	brne	.+16     	; 0x4b4 <writePort+0x3c>
 4a4:	06 c0       	rjmp	.+12     	; 0x4b2 <writePort+0x3a>
	{
		case 'A':
		case 'a':
		PORTA = value;
 4a6:	6b bb       	out	0x1b, r22	; 27
		break;
 4a8:	08 95       	ret
		
		case 'B':
		case 'b':
		PORTB = value;
 4aa:	68 bb       	out	0x18, r22	; 24
		break;
 4ac:	08 95       	ret
		
		case 'C':
		case 'c':
		PORTC = value;
 4ae:	65 bb       	out	0x15, r22	; 21
		break;
 4b0:	08 95       	ret
		
		case 'D':
		case 'd':
		PORTD = value;
 4b2:	62 bb       	out	0x12, r22	; 18
 4b4:	08 95       	ret

000004b6 <readPort>:
//--------------------------------------------------------------------------------------------------------------------------------

char readPort (char port)
{
	char x=0 ;
	switch(port)
 4b6:	84 34       	cpi	r24, 0x44	; 68
 4b8:	d9 f0       	breq	.+54     	; 0x4f0 <readPort+0x3a>
 4ba:	85 34       	cpi	r24, 0x45	; 69
 4bc:	38 f4       	brcc	.+14     	; 0x4cc <readPort+0x16>
 4be:	82 34       	cpi	r24, 0x42	; 66
 4c0:	99 f0       	breq	.+38     	; 0x4e8 <readPort+0x32>
 4c2:	83 34       	cpi	r24, 0x43	; 67
 4c4:	98 f4       	brcc	.+38     	; 0x4ec <readPort+0x36>
 4c6:	81 34       	cpi	r24, 0x41	; 65
 4c8:	a9 f4       	brne	.+42     	; 0x4f4 <readPort+0x3e>
 4ca:	0c c0       	rjmp	.+24     	; 0x4e4 <readPort+0x2e>
 4cc:	82 36       	cpi	r24, 0x62	; 98
 4ce:	61 f0       	breq	.+24     	; 0x4e8 <readPort+0x32>
 4d0:	83 36       	cpi	r24, 0x63	; 99
 4d2:	18 f4       	brcc	.+6      	; 0x4da <readPort+0x24>
 4d4:	81 36       	cpi	r24, 0x61	; 97
 4d6:	71 f4       	brne	.+28     	; 0x4f4 <readPort+0x3e>
 4d8:	05 c0       	rjmp	.+10     	; 0x4e4 <readPort+0x2e>
 4da:	83 36       	cpi	r24, 0x63	; 99
 4dc:	39 f0       	breq	.+14     	; 0x4ec <readPort+0x36>
 4de:	84 36       	cpi	r24, 0x64	; 100
 4e0:	49 f4       	brne	.+18     	; 0x4f4 <readPort+0x3e>
 4e2:	06 c0       	rjmp	.+12     	; 0x4f0 <readPort+0x3a>
	{
		case 'A':
		case 'a':
		x = PINA;
 4e4:	89 b3       	in	r24, 0x19	; 25
		break;
 4e6:	08 95       	ret
		
		case 'B':
		case 'b':
	    x = PINB;
 4e8:	86 b3       	in	r24, 0x16	; 22
		break;
 4ea:	08 95       	ret
		
		case 'C':
		case 'c':
	    x = PINC;
 4ec:	83 b3       	in	r24, 0x13	; 19
		break;
 4ee:	08 95       	ret
		
		case 'D':
		case 'd':
	    x = PIND;
 4f0:	80 b3       	in	r24, 0x10	; 16
		break;
 4f2:	08 95       	ret

//--------------------------------------------------------------------------------------------------------------------------------

char readPort (char port)
{
	char x=0 ;
 4f4:	80 e0       	ldi	r24, 0x00	; 0
	    x = PIND;
		break;
	}
	
	return x;
}
 4f6:	08 95       	ret

000004f8 <setLowNibbleDir>:

//--------------------------------------------------------------------------------------------------------------------------------


void setLowNibbleDir (char port , char dir )
{
 4f8:	0f 93       	push	r16
 4fa:	1f 93       	push	r17
 4fc:	cf 93       	push	r28
 4fe:	c8 2f       	mov	r28, r24
 500:	06 2f       	mov	r16, r22
		
	setPinDIr(port,0,READ_BIT(dir,0));
 502:	46 2f       	mov	r20, r22
 504:	41 70       	andi	r20, 0x01	; 1
 506:	60 e0       	ldi	r22, 0x00	; 0
 508:	0e 94 49 00 	call	0x92	; 0x92 <setPinDIr>
	setPinDIr(port,1,READ_BIT(dir,1));	
 50c:	10 e0       	ldi	r17, 0x00	; 0
 50e:	a8 01       	movw	r20, r16
 510:	42 70       	andi	r20, 0x02	; 2
 512:	50 70       	andi	r21, 0x00	; 0
 514:	55 95       	asr	r21
 516:	47 95       	ror	r20
 518:	8c 2f       	mov	r24, r28
 51a:	61 e0       	ldi	r22, 0x01	; 1
 51c:	0e 94 49 00 	call	0x92	; 0x92 <setPinDIr>
	setPinDIr(port,2,READ_BIT(dir,2));			
 520:	a8 01       	movw	r20, r16
 522:	44 70       	andi	r20, 0x04	; 4
 524:	50 70       	andi	r21, 0x00	; 0
 526:	55 95       	asr	r21
 528:	47 95       	ror	r20
 52a:	55 95       	asr	r21
 52c:	47 95       	ror	r20
 52e:	8c 2f       	mov	r24, r28
 530:	62 e0       	ldi	r22, 0x02	; 2
 532:	0e 94 49 00 	call	0x92	; 0x92 <setPinDIr>
	setPinDIr(port,3,READ_BIT(dir,3));					
 536:	08 70       	andi	r16, 0x08	; 8
 538:	10 70       	andi	r17, 0x00	; 0
 53a:	a8 01       	movw	r20, r16
 53c:	55 95       	asr	r21
 53e:	47 95       	ror	r20
 540:	55 95       	asr	r21
 542:	47 95       	ror	r20
 544:	55 95       	asr	r21
 546:	47 95       	ror	r20
 548:	8c 2f       	mov	r24, r28
 54a:	63 e0       	ldi	r22, 0x03	; 3
 54c:	0e 94 49 00 	call	0x92	; 0x92 <setPinDIr>
}
 550:	cf 91       	pop	r28
 552:	1f 91       	pop	r17
 554:	0f 91       	pop	r16
 556:	08 95       	ret

00000558 <setHighNibbleDir>:

//--------------------------------------------------------------------------------------------------------------------------------

void setHighNibbleDir (char port , char dir )
{
 558:	0f 93       	push	r16
 55a:	1f 93       	push	r17
 55c:	cf 93       	push	r28
 55e:	c8 2f       	mov	r28, r24
 560:	06 2f       	mov	r16, r22
	
	setPinDIr(port,4,READ_BIT(dir,0));
 562:	46 2f       	mov	r20, r22
 564:	41 70       	andi	r20, 0x01	; 1
 566:	64 e0       	ldi	r22, 0x04	; 4
 568:	0e 94 49 00 	call	0x92	; 0x92 <setPinDIr>
	setPinDIr(port,5,READ_BIT(dir,1));
 56c:	10 e0       	ldi	r17, 0x00	; 0
 56e:	a8 01       	movw	r20, r16
 570:	42 70       	andi	r20, 0x02	; 2
 572:	50 70       	andi	r21, 0x00	; 0
 574:	55 95       	asr	r21
 576:	47 95       	ror	r20
 578:	8c 2f       	mov	r24, r28
 57a:	65 e0       	ldi	r22, 0x05	; 5
 57c:	0e 94 49 00 	call	0x92	; 0x92 <setPinDIr>
	setPinDIr(port,6,READ_BIT(dir,2));
 580:	a8 01       	movw	r20, r16
 582:	44 70       	andi	r20, 0x04	; 4
 584:	50 70       	andi	r21, 0x00	; 0
 586:	55 95       	asr	r21
 588:	47 95       	ror	r20
 58a:	55 95       	asr	r21
 58c:	47 95       	ror	r20
 58e:	8c 2f       	mov	r24, r28
 590:	66 e0       	ldi	r22, 0x06	; 6
 592:	0e 94 49 00 	call	0x92	; 0x92 <setPinDIr>
	setPinDIr(port,7,READ_BIT(dir,3));
 596:	08 70       	andi	r16, 0x08	; 8
 598:	10 70       	andi	r17, 0x00	; 0
 59a:	a8 01       	movw	r20, r16
 59c:	55 95       	asr	r21
 59e:	47 95       	ror	r20
 5a0:	55 95       	asr	r21
 5a2:	47 95       	ror	r20
 5a4:	55 95       	asr	r21
 5a6:	47 95       	ror	r20
 5a8:	8c 2f       	mov	r24, r28
 5aa:	67 e0       	ldi	r22, 0x07	; 7
 5ac:	0e 94 49 00 	call	0x92	; 0x92 <setPinDIr>
}
 5b0:	cf 91       	pop	r28
 5b2:	1f 91       	pop	r17
 5b4:	0f 91       	pop	r16
 5b6:	08 95       	ret

000005b8 <writeLowNibble>:


//--------------------------------------------------------------------------------------------------------------------------------

void writeLowNibble(char port , char val)
{
 5b8:	0f 93       	push	r16
 5ba:	1f 93       	push	r17
 5bc:	cf 93       	push	r28
 5be:	c8 2f       	mov	r28, r24
 5c0:	06 2f       	mov	r16, r22
	writePIn(port,0,READ_BIT(val,0));
 5c2:	46 2f       	mov	r20, r22
 5c4:	41 70       	andi	r20, 0x01	; 1
 5c6:	60 e0       	ldi	r22, 0x00	; 0
 5c8:	0e 94 da 00 	call	0x1b4	; 0x1b4 <writePIn>
	writePIn(port,1,READ_BIT(val,1));
 5cc:	10 e0       	ldi	r17, 0x00	; 0
 5ce:	a8 01       	movw	r20, r16
 5d0:	42 70       	andi	r20, 0x02	; 2
 5d2:	50 70       	andi	r21, 0x00	; 0
 5d4:	55 95       	asr	r21
 5d6:	47 95       	ror	r20
 5d8:	8c 2f       	mov	r24, r28
 5da:	61 e0       	ldi	r22, 0x01	; 1
 5dc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <writePIn>
	writePIn(port,2,READ_BIT(val,2));
 5e0:	a8 01       	movw	r20, r16
 5e2:	44 70       	andi	r20, 0x04	; 4
 5e4:	50 70       	andi	r21, 0x00	; 0
 5e6:	55 95       	asr	r21
 5e8:	47 95       	ror	r20
 5ea:	55 95       	asr	r21
 5ec:	47 95       	ror	r20
 5ee:	8c 2f       	mov	r24, r28
 5f0:	62 e0       	ldi	r22, 0x02	; 2
 5f2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <writePIn>
	writePIn(port,3,READ_BIT(val,3));
 5f6:	08 70       	andi	r16, 0x08	; 8
 5f8:	10 70       	andi	r17, 0x00	; 0
 5fa:	a8 01       	movw	r20, r16
 5fc:	55 95       	asr	r21
 5fe:	47 95       	ror	r20
 600:	55 95       	asr	r21
 602:	47 95       	ror	r20
 604:	55 95       	asr	r21
 606:	47 95       	ror	r20
 608:	8c 2f       	mov	r24, r28
 60a:	63 e0       	ldi	r22, 0x03	; 3
 60c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <writePIn>

}
 610:	cf 91       	pop	r28
 612:	1f 91       	pop	r17
 614:	0f 91       	pop	r16
 616:	08 95       	ret

00000618 <writeHighNibble>:

//--------------------------------------------------------------------------------------------------------------------------------

void writeHighNibble(char port , char val)
{
 618:	0f 93       	push	r16
 61a:	1f 93       	push	r17
 61c:	cf 93       	push	r28
 61e:	c8 2f       	mov	r28, r24
 620:	06 2f       	mov	r16, r22
	writePIn(port,4,READ_BIT(val,0));
 622:	46 2f       	mov	r20, r22
 624:	41 70       	andi	r20, 0x01	; 1
 626:	64 e0       	ldi	r22, 0x04	; 4
 628:	0e 94 da 00 	call	0x1b4	; 0x1b4 <writePIn>
	writePIn(port,5,READ_BIT(val,1));
 62c:	10 e0       	ldi	r17, 0x00	; 0
 62e:	a8 01       	movw	r20, r16
 630:	42 70       	andi	r20, 0x02	; 2
 632:	50 70       	andi	r21, 0x00	; 0
 634:	55 95       	asr	r21
 636:	47 95       	ror	r20
 638:	8c 2f       	mov	r24, r28
 63a:	65 e0       	ldi	r22, 0x05	; 5
 63c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <writePIn>
	writePIn(port,6,READ_BIT(val,2));
 640:	a8 01       	movw	r20, r16
 642:	44 70       	andi	r20, 0x04	; 4
 644:	50 70       	andi	r21, 0x00	; 0
 646:	55 95       	asr	r21
 648:	47 95       	ror	r20
 64a:	55 95       	asr	r21
 64c:	47 95       	ror	r20
 64e:	8c 2f       	mov	r24, r28
 650:	66 e0       	ldi	r22, 0x06	; 6
 652:	0e 94 da 00 	call	0x1b4	; 0x1b4 <writePIn>
	writePIn(port,7,READ_BIT(val,3));
 656:	08 70       	andi	r16, 0x08	; 8
 658:	10 70       	andi	r17, 0x00	; 0
 65a:	a8 01       	movw	r20, r16
 65c:	55 95       	asr	r21
 65e:	47 95       	ror	r20
 660:	55 95       	asr	r21
 662:	47 95       	ror	r20
 664:	55 95       	asr	r21
 666:	47 95       	ror	r20
 668:	8c 2f       	mov	r24, r28
 66a:	67 e0       	ldi	r22, 0x07	; 7
 66c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <writePIn>

}
 670:	cf 91       	pop	r28
 672:	1f 91       	pop	r17
 674:	0f 91       	pop	r16
 676:	08 95       	ret

00000678 <pullUpEnable>:

//--------------------------------------------------------------------------------------------------------------------------------

void pullUpEnable (char port , char pin)
{
	switch(port)
 678:	84 34       	cpi	r24, 0x44	; 68
 67a:	09 f4       	brne	.+2      	; 0x67e <pullUpEnable+0x6>
 67c:	3d c0       	rjmp	.+122    	; 0x6f8 <pullUpEnable+0x80>
 67e:	85 34       	cpi	r24, 0x45	; 69
 680:	40 f4       	brcc	.+16     	; 0x692 <pullUpEnable+0x1a>
 682:	82 34       	cpi	r24, 0x42	; 66
 684:	f9 f0       	breq	.+62     	; 0x6c4 <pullUpEnable+0x4c>
 686:	83 34       	cpi	r24, 0x43	; 67
 688:	50 f5       	brcc	.+84     	; 0x6de <pullUpEnable+0x66>
 68a:	81 34       	cpi	r24, 0x41	; 65
 68c:	09 f0       	breq	.+2      	; 0x690 <pullUpEnable+0x18>
 68e:	40 c0       	rjmp	.+128    	; 0x710 <pullUpEnable+0x98>
 690:	0c c0       	rjmp	.+24     	; 0x6aa <pullUpEnable+0x32>
 692:	82 36       	cpi	r24, 0x62	; 98
 694:	b9 f0       	breq	.+46     	; 0x6c4 <pullUpEnable+0x4c>
 696:	83 36       	cpi	r24, 0x63	; 99
 698:	18 f4       	brcc	.+6      	; 0x6a0 <pullUpEnable+0x28>
 69a:	81 36       	cpi	r24, 0x61	; 97
 69c:	c9 f5       	brne	.+114    	; 0x710 <pullUpEnable+0x98>
 69e:	05 c0       	rjmp	.+10     	; 0x6aa <pullUpEnable+0x32>
 6a0:	83 36       	cpi	r24, 0x63	; 99
 6a2:	e9 f0       	breq	.+58     	; 0x6de <pullUpEnable+0x66>
 6a4:	84 36       	cpi	r24, 0x64	; 100
 6a6:	a1 f5       	brne	.+104    	; 0x710 <pullUpEnable+0x98>
 6a8:	27 c0       	rjmp	.+78     	; 0x6f8 <pullUpEnable+0x80>
	{
		case'A':
		case'a':
		SET_BIT(PORTA,pin) ;
 6aa:	2b b3       	in	r18, 0x1b	; 27
 6ac:	81 e0       	ldi	r24, 0x01	; 1
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	ac 01       	movw	r20, r24
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <pullUpEnable+0x40>
 6b4:	44 0f       	add	r20, r20
 6b6:	55 1f       	adc	r21, r21
 6b8:	6a 95       	dec	r22
 6ba:	e2 f7       	brpl	.-8      	; 0x6b4 <pullUpEnable+0x3c>
 6bc:	ba 01       	movw	r22, r20
 6be:	62 2b       	or	r22, r18
 6c0:	6b bb       	out	0x1b, r22	; 27
		break;
 6c2:	08 95       	ret
		
		case'B':
		case'b':
		SET_BIT(PORTB,pin) ;
 6c4:	28 b3       	in	r18, 0x18	; 24
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	90 e0       	ldi	r25, 0x00	; 0
 6ca:	ac 01       	movw	r20, r24
 6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <pullUpEnable+0x5a>
 6ce:	44 0f       	add	r20, r20
 6d0:	55 1f       	adc	r21, r21
 6d2:	6a 95       	dec	r22
 6d4:	e2 f7       	brpl	.-8      	; 0x6ce <pullUpEnable+0x56>
 6d6:	ba 01       	movw	r22, r20
 6d8:	62 2b       	or	r22, r18
 6da:	68 bb       	out	0x18, r22	; 24
		break;
 6dc:	08 95       	ret
		
		case'C':
		case'c':
		SET_BIT(PORTC,pin) ;
 6de:	25 b3       	in	r18, 0x15	; 21
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	ac 01       	movw	r20, r24
 6e6:	02 c0       	rjmp	.+4      	; 0x6ec <pullUpEnable+0x74>
 6e8:	44 0f       	add	r20, r20
 6ea:	55 1f       	adc	r21, r21
 6ec:	6a 95       	dec	r22
 6ee:	e2 f7       	brpl	.-8      	; 0x6e8 <pullUpEnable+0x70>
 6f0:	ba 01       	movw	r22, r20
 6f2:	62 2b       	or	r22, r18
 6f4:	65 bb       	out	0x15, r22	; 21
		break;
 6f6:	08 95       	ret
		
		case'D':
		case'd':
		SET_BIT(PORTD,pin) ;
 6f8:	22 b3       	in	r18, 0x12	; 18
 6fa:	81 e0       	ldi	r24, 0x01	; 1
 6fc:	90 e0       	ldi	r25, 0x00	; 0
 6fe:	ac 01       	movw	r20, r24
 700:	02 c0       	rjmp	.+4      	; 0x706 <pullUpEnable+0x8e>
 702:	44 0f       	add	r20, r20
 704:	55 1f       	adc	r21, r21
 706:	6a 95       	dec	r22
 708:	e2 f7       	brpl	.-8      	; 0x702 <pullUpEnable+0x8a>
 70a:	ba 01       	movw	r22, r20
 70c:	62 2b       	or	r22, r18
 70e:	62 bb       	out	0x12, r22	; 18
 710:	08 95       	ret

00000712 <EEPROM_write>:
#include "std_macros.h"


void EEPROM_write (short address , char data)
{
	EEAR = address ;
 712:	28 2f       	mov	r18, r24
 714:	39 2f       	mov	r19, r25
 716:	3f bb       	out	0x1f, r19	; 31
 718:	2e bb       	out	0x1e, r18	; 30
	EEDR = data ;
 71a:	6d bb       	out	0x1d, r22	; 29
	CLR_BIT(SREG,7);
 71c:	8f b7       	in	r24, 0x3f	; 63
 71e:	8f 77       	andi	r24, 0x7F	; 127
 720:	8f bf       	out	0x3f, r24	; 63
	SET_BIT(EECR,EEMWE);
 722:	e2 9a       	sbi	0x1c, 2	; 28
	SET_BIT(EECR,EEWE);
 724:	e1 9a       	sbi	0x1c, 1	; 28
	SET_BIT(SREG,7);
 726:	8f b7       	in	r24, 0x3f	; 63
 728:	80 68       	ori	r24, 0x80	; 128
 72a:	8f bf       	out	0x3f, r24	; 63
	while(READ_BIT(EECR,EEWE));
 72c:	e1 99       	sbic	0x1c, 1	; 28
 72e:	fe cf       	rjmp	.-4      	; 0x72c <EEPROM_write+0x1a>
}
 730:	08 95       	ret

00000732 <EEPROM_read>:

//--------------------------------------------------------------------------------------------------------------------------------

char EEPROM_read (short address)
{
	EEAR = address;
 732:	28 2f       	mov	r18, r24
 734:	39 2f       	mov	r19, r25
 736:	3f bb       	out	0x1f, r19	; 31
 738:	2e bb       	out	0x1e, r18	; 30
	SET_BIT(EECR,EERE);
 73a:	e0 9a       	sbi	0x1c, 0	; 28
	return EEDR ;
 73c:	8d b3       	in	r24, 0x1d	; 29
}
 73e:	08 95       	ret

00000740 <KEYPAD_init>:
#include "keypad.h"


void KEYPAD_init(void)
{
	setLowNibbleDir(KEYPAD_PORT, 0b1111);
 740:	83 e4       	ldi	r24, 0x43	; 67
 742:	6f e0       	ldi	r22, 0x0F	; 15
 744:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <setLowNibbleDir>
	setPinDIr(KEYPAD_PORT,C1,0);
 748:	83 e4       	ldi	r24, 0x43	; 67
 74a:	64 e0       	ldi	r22, 0x04	; 4
 74c:	40 e0       	ldi	r20, 0x00	; 0
 74e:	0e 94 49 00 	call	0x92	; 0x92 <setPinDIr>
	setPinDIr(KEYPAD_PORT,C2,0);
 752:	83 e4       	ldi	r24, 0x43	; 67
 754:	65 e0       	ldi	r22, 0x05	; 5
 756:	40 e0       	ldi	r20, 0x00	; 0
 758:	0e 94 49 00 	call	0x92	; 0x92 <setPinDIr>
	setPinDIr(KEYPAD_PORT,C3,0);
 75c:	83 e4       	ldi	r24, 0x43	; 67
 75e:	66 e0       	ldi	r22, 0x06	; 6
 760:	40 e0       	ldi	r20, 0x00	; 0
 762:	0e 94 49 00 	call	0x92	; 0x92 <setPinDIr>
	pullUpEnable(KEYPAD_PORT,C1);
 766:	83 e4       	ldi	r24, 0x43	; 67
 768:	64 e0       	ldi	r22, 0x04	; 4
 76a:	0e 94 3c 03 	call	0x678	; 0x678 <pullUpEnable>
	pullUpEnable(KEYPAD_PORT,C2);
 76e:	83 e4       	ldi	r24, 0x43	; 67
 770:	65 e0       	ldi	r22, 0x05	; 5
 772:	0e 94 3c 03 	call	0x678	; 0x678 <pullUpEnable>
	pullUpEnable(KEYPAD_PORT,C3);	
 776:	83 e4       	ldi	r24, 0x43	; 67
 778:	66 e0       	ldi	r22, 0x06	; 6
 77a:	0e 94 3c 03 	call	0x678	; 0x678 <pullUpEnable>
}
 77e:	08 95       	ret

00000780 <KEYPAD_getKey>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 780:	8f ef       	ldi	r24, 0xFF	; 255
 782:	91 ee       	ldi	r25, 0xE1	; 225
 784:	a4 e0       	ldi	r26, 0x04	; 4
 786:	81 50       	subi	r24, 0x01	; 1
 788:	90 40       	sbci	r25, 0x00	; 0
 78a:	a0 40       	sbci	r26, 0x00	; 0
 78c:	e1 f7       	brne	.-8      	; 0x786 <KEYPAD_getKey+0x6>
 78e:	00 c0       	rjmp	.+0      	; 0x790 <KEYPAD_getKey+0x10>
 790:	00 00       	nop

char KEYPAD_getKey(void)
{
	    _delay_ms(200);
		
		writePIn(KEYPAD_PORT,R1,0);
 792:	83 e4       	ldi	r24, 0x43	; 67
 794:	60 e0       	ldi	r22, 0x00	; 0
 796:	40 e0       	ldi	r20, 0x00	; 0
 798:	0e 94 da 00 	call	0x1b4	; 0x1b4 <writePIn>
		writePIn(KEYPAD_PORT,R2,1);
 79c:	83 e4       	ldi	r24, 0x43	; 67
 79e:	61 e0       	ldi	r22, 0x01	; 1
 7a0:	41 e0       	ldi	r20, 0x01	; 1
 7a2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <writePIn>
		writePIn(KEYPAD_PORT,R3,1);
 7a6:	83 e4       	ldi	r24, 0x43	; 67
 7a8:	62 e0       	ldi	r22, 0x02	; 2
 7aa:	41 e0       	ldi	r20, 0x01	; 1
 7ac:	0e 94 da 00 	call	0x1b4	; 0x1b4 <writePIn>
		writePIn(KEYPAD_PORT,R4,1);
 7b0:	83 e4       	ldi	r24, 0x43	; 67
 7b2:	63 e0       	ldi	r22, 0x03	; 3
 7b4:	41 e0       	ldi	r20, 0x01	; 1
 7b6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <writePIn>
		if(READ_BIT(KEYPAD_PIN,C1)==0)
 7ba:	9c 9b       	sbis	0x13, 4	; 19
 7bc:	54 c0       	rjmp	.+168    	; 0x866 <__stack+0x7>
		{
			return '1';
		}
		if(READ_BIT(KEYPAD_PIN,C2)==0)
 7be:	9d 9b       	sbis	0x13, 5	; 19
 7c0:	54 c0       	rjmp	.+168    	; 0x86a <__stack+0xb>
		{
			return '2';
		}
		if(READ_BIT(KEYPAD_PIN,C3)==0)
 7c2:	9e 9b       	sbis	0x13, 6	; 19
 7c4:	54 c0       	rjmp	.+168    	; 0x86e <__stack+0xf>
		{
			return '3';
		}
		
		
		writePIn(KEYPAD_PORT,R1,1);
 7c6:	83 e4       	ldi	r24, 0x43	; 67
 7c8:	60 e0       	ldi	r22, 0x00	; 0
 7ca:	41 e0       	ldi	r20, 0x01	; 1
 7cc:	0e 94 da 00 	call	0x1b4	; 0x1b4 <writePIn>
		writePIn(KEYPAD_PORT,R2,0);
 7d0:	83 e4       	ldi	r24, 0x43	; 67
 7d2:	61 e0       	ldi	r22, 0x01	; 1
 7d4:	40 e0       	ldi	r20, 0x00	; 0
 7d6:	0e 94 da 00 	call	0x1b4	; 0x1b4 <writePIn>
		writePIn(KEYPAD_PORT,R3,1);
 7da:	83 e4       	ldi	r24, 0x43	; 67
 7dc:	62 e0       	ldi	r22, 0x02	; 2
 7de:	41 e0       	ldi	r20, 0x01	; 1
 7e0:	0e 94 da 00 	call	0x1b4	; 0x1b4 <writePIn>
		writePIn(KEYPAD_PORT,R4,1);
 7e4:	83 e4       	ldi	r24, 0x43	; 67
 7e6:	63 e0       	ldi	r22, 0x03	; 3
 7e8:	41 e0       	ldi	r20, 0x01	; 1
 7ea:	0e 94 da 00 	call	0x1b4	; 0x1b4 <writePIn>
		if(READ_BIT(KEYPAD_PIN,C1)==0)
 7ee:	9c 9b       	sbis	0x13, 4	; 19
 7f0:	40 c0       	rjmp	.+128    	; 0x872 <__stack+0x13>
		{
			return '4';
		}
		if(READ_BIT(KEYPAD_PIN,C2)==0)
 7f2:	9d 9b       	sbis	0x13, 5	; 19
 7f4:	40 c0       	rjmp	.+128    	; 0x876 <__stack+0x17>
		{
			return '5';
		}
		if(READ_BIT(KEYPAD_PIN,C3)==0)
 7f6:	9e 9b       	sbis	0x13, 6	; 19
 7f8:	40 c0       	rjmp	.+128    	; 0x87a <__stack+0x1b>
		{
			return '6';
		}
	
		
		writePIn(KEYPAD_PORT,R1,1);
 7fa:	83 e4       	ldi	r24, 0x43	; 67
 7fc:	60 e0       	ldi	r22, 0x00	; 0
 7fe:	41 e0       	ldi	r20, 0x01	; 1
 800:	0e 94 da 00 	call	0x1b4	; 0x1b4 <writePIn>
		writePIn(KEYPAD_PORT,R2,1);
 804:	83 e4       	ldi	r24, 0x43	; 67
 806:	61 e0       	ldi	r22, 0x01	; 1
 808:	41 e0       	ldi	r20, 0x01	; 1
 80a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <writePIn>
		writePIn(KEYPAD_PORT,R3,0);
 80e:	83 e4       	ldi	r24, 0x43	; 67
 810:	62 e0       	ldi	r22, 0x02	; 2
 812:	40 e0       	ldi	r20, 0x00	; 0
 814:	0e 94 da 00 	call	0x1b4	; 0x1b4 <writePIn>
		writePIn(KEYPAD_PORT,R4,1);
 818:	83 e4       	ldi	r24, 0x43	; 67
 81a:	63 e0       	ldi	r22, 0x03	; 3
 81c:	41 e0       	ldi	r20, 0x01	; 1
 81e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <writePIn>
		if(READ_BIT(KEYPAD_PIN,C1)==0)
 822:	9c 9b       	sbis	0x13, 4	; 19
 824:	2c c0       	rjmp	.+88     	; 0x87e <__stack+0x1f>
		{
			return '7';
		}
		if(READ_BIT(KEYPAD_PIN,C2)==0)
 826:	9d 9b       	sbis	0x13, 5	; 19
 828:	2c c0       	rjmp	.+88     	; 0x882 <__stack+0x23>
		{
			return '8';
		}
		if(READ_BIT(KEYPAD_PIN,C3)==0)
 82a:	9e 9b       	sbis	0x13, 6	; 19
 82c:	2c c0       	rjmp	.+88     	; 0x886 <__stack+0x27>
		{
			return '9';
		}
		
			
		writePIn(KEYPAD_PORT,R1,1);
 82e:	83 e4       	ldi	r24, 0x43	; 67
 830:	60 e0       	ldi	r22, 0x00	; 0
 832:	41 e0       	ldi	r20, 0x01	; 1
 834:	0e 94 da 00 	call	0x1b4	; 0x1b4 <writePIn>
		writePIn(KEYPAD_PORT,R2,1);
 838:	83 e4       	ldi	r24, 0x43	; 67
 83a:	61 e0       	ldi	r22, 0x01	; 1
 83c:	41 e0       	ldi	r20, 0x01	; 1
 83e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <writePIn>
		writePIn(KEYPAD_PORT,R3,1);
 842:	83 e4       	ldi	r24, 0x43	; 67
 844:	62 e0       	ldi	r22, 0x02	; 2
 846:	41 e0       	ldi	r20, 0x01	; 1
 848:	0e 94 da 00 	call	0x1b4	; 0x1b4 <writePIn>
		writePIn(KEYPAD_PORT,R4,0);
 84c:	83 e4       	ldi	r24, 0x43	; 67
 84e:	63 e0       	ldi	r22, 0x03	; 3
 850:	40 e0       	ldi	r20, 0x00	; 0
 852:	0e 94 da 00 	call	0x1b4	; 0x1b4 <writePIn>
		if(READ_BIT(KEYPAD_PIN,C1)==0)
 856:	9c 9b       	sbis	0x13, 4	; 19
 858:	18 c0       	rjmp	.+48     	; 0x88a <__stack+0x2b>
		{
			return '*';
		}
		if(READ_BIT(KEYPAD_PIN,C2)==0)
 85a:	9d 9b       	sbis	0x13, 5	; 19
 85c:	18 c0       	rjmp	.+48     	; 0x88e <__stack+0x2f>
		{
			return '0';
		}
		if(READ_BIT(KEYPAD_PIN,C3)==0)
 85e:	9e 99       	sbic	0x13, 6	; 19
 860:	18 c0       	rjmp	.+48     	; 0x892 <__stack+0x33>
		{
			return '#';
 862:	83 e2       	ldi	r24, 0x23	; 35
 864:	08 95       	ret
		writePIn(KEYPAD_PORT,R2,1);
		writePIn(KEYPAD_PORT,R3,1);
		writePIn(KEYPAD_PORT,R4,1);
		if(READ_BIT(KEYPAD_PIN,C1)==0)
		{
			return '1';
 866:	81 e3       	ldi	r24, 0x31	; 49
 868:	08 95       	ret
		}
		if(READ_BIT(KEYPAD_PIN,C2)==0)
		{
			return '2';
 86a:	82 e3       	ldi	r24, 0x32	; 50
 86c:	08 95       	ret
		}
		if(READ_BIT(KEYPAD_PIN,C3)==0)
		{
			return '3';
 86e:	83 e3       	ldi	r24, 0x33	; 51
 870:	08 95       	ret
		writePIn(KEYPAD_PORT,R2,0);
		writePIn(KEYPAD_PORT,R3,1);
		writePIn(KEYPAD_PORT,R4,1);
		if(READ_BIT(KEYPAD_PIN,C1)==0)
		{
			return '4';
 872:	84 e3       	ldi	r24, 0x34	; 52
 874:	08 95       	ret
		}
		if(READ_BIT(KEYPAD_PIN,C2)==0)
		{
			return '5';
 876:	85 e3       	ldi	r24, 0x35	; 53
 878:	08 95       	ret
		}
		if(READ_BIT(KEYPAD_PIN,C3)==0)
		{
			return '6';
 87a:	86 e3       	ldi	r24, 0x36	; 54
 87c:	08 95       	ret
		writePIn(KEYPAD_PORT,R2,1);
		writePIn(KEYPAD_PORT,R3,0);
		writePIn(KEYPAD_PORT,R4,1);
		if(READ_BIT(KEYPAD_PIN,C1)==0)
		{
			return '7';
 87e:	87 e3       	ldi	r24, 0x37	; 55
 880:	08 95       	ret
		}
		if(READ_BIT(KEYPAD_PIN,C2)==0)
		{
			return '8';
 882:	88 e3       	ldi	r24, 0x38	; 56
 884:	08 95       	ret
		}
		if(READ_BIT(KEYPAD_PIN,C3)==0)
		{
			return '9';
 886:	89 e3       	ldi	r24, 0x39	; 57
 888:	08 95       	ret
		writePIn(KEYPAD_PORT,R2,1);
		writePIn(KEYPAD_PORT,R3,1);
		writePIn(KEYPAD_PORT,R4,0);
		if(READ_BIT(KEYPAD_PIN,C1)==0)
		{
			return '*';
 88a:	8a e2       	ldi	r24, 0x2A	; 42
 88c:	08 95       	ret
		}
		if(READ_BIT(KEYPAD_PIN,C2)==0)
		{
			return '0';
 88e:	80 e3       	ldi	r24, 0x30	; 48
 890:	08 95       	ret
		if(READ_BIT(KEYPAD_PIN,C3)==0)
		{
			return '#';
		}
	
		return 0xFF;						
 892:	8f ef       	ldi	r24, 0xFF	; 255
 894:	08 95       	ret

00000896 <main>:




int main(void)
{
 896:	2f 92       	push	r2
 898:	3f 92       	push	r3
 89a:	4f 92       	push	r4
 89c:	5f 92       	push	r5
 89e:	6f 92       	push	r6
 8a0:	7f 92       	push	r7
 8a2:	8f 92       	push	r8
 8a4:	9f 92       	push	r9
 8a6:	af 92       	push	r10
 8a8:	bf 92       	push	r11
 8aa:	cf 92       	push	r12
 8ac:	df 92       	push	r13
 8ae:	ef 92       	push	r14
 8b0:	ff 92       	push	r15
 8b2:	0f 93       	push	r16
 8b4:	1f 93       	push	r17
 8b6:	cf 93       	push	r28
 8b8:	df 93       	push	r29
 8ba:	cd b7       	in	r28, 0x3d	; 61
 8bc:	de b7       	in	r29, 0x3e	; 62
 8be:	2e 97       	sbiw	r28, 0x0e	; 14
 8c0:	0f b6       	in	r0, 0x3f	; 63
 8c2:	f8 94       	cli
 8c4:	de bf       	out	0x3e, r29	; 62
 8c6:	0f be       	out	0x3f, r0	; 63
 8c8:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
 8ca:	0e 94 aa 06 	call	0xd54	; 0xd54 <LCD_init>
	KEYPAD_init();
 8ce:	0e 94 a0 03 	call	0x740	; 0x740 <KEYPAD_init>
	setPinDIr('D',RED_LED,1);  
 8d2:	84 e4       	ldi	r24, 0x44	; 68
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	60 e0       	ldi	r22, 0x00	; 0
 8d8:	70 e0       	ldi	r23, 0x00	; 0
 8da:	41 e0       	ldi	r20, 0x01	; 1
 8dc:	50 e0       	ldi	r21, 0x00	; 0
 8de:	0e 94 49 00 	call	0x92	; 0x92 <setPinDIr>
	setPinDIr('D',GREEN_LED,1);
 8e2:	84 e4       	ldi	r24, 0x44	; 68
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	61 e0       	ldi	r22, 0x01	; 1
 8e8:	70 e0       	ldi	r23, 0x00	; 0
 8ea:	41 e0       	ldi	r20, 0x01	; 1
 8ec:	50 e0       	ldi	r21, 0x00	; 0
 8ee:	0e 94 49 00 	call	0x92	; 0x92 <setPinDIr>
	writePIn('D',RED_LED,1);             // Turn on red LED initially
 8f2:	84 e4       	ldi	r24, 0x44	; 68
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	60 e0       	ldi	r22, 0x00	; 0
 8f8:	70 e0       	ldi	r23, 0x00	; 0
 8fa:	41 e0       	ldi	r20, 0x01	; 1
 8fc:	50 e0       	ldi	r21, 0x00	; 0
 8fe:	0e 94 da 00 	call	0x1b4	; 0x1b4 <writePIn>
	char arr1[PASSWORD_LENGTH] , arr2[PASSWORD_LENGTH] , val, tries = MAX_TRIES , checkIdenticalFlag=1;
 902:	0f 2e       	mov	r0, r31
 904:	f3 e0       	ldi	r31, 0x03	; 3
 906:	6f 2e       	mov	r6, r31
 908:	f0 2d       	mov	r31, r0
#define PASSWORD_LENGTH 4




int main(void)
 90a:	0f 2e       	mov	r0, r31
 90c:	f5 e0       	ldi	r31, 0x05	; 5
 90e:	af 2e       	mov	r10, r31
 910:	bb 24       	eor	r11, r11
 912:	f0 2d       	mov	r31, r0
 914:	ac 0e       	add	r10, r28
 916:	bd 1e       	adc	r11, r29
 918:	2e 01       	movw	r4, r28
 91a:	08 94       	sec
 91c:	41 1c       	adc	r4, r1
 91e:	51 1c       	adc	r5, r1
 920:	ab 86       	std	Y+11, r10	; 0x0b
 922:	bc 86       	std	Y+12, r11	; 0x0c
 924:	84 2c       	mov	r8, r4
 926:	75 2c       	mov	r7, r5
 928:	ad 86       	std	Y+13, r10	; 0x0d
 92a:	be 86       	std	Y+14, r11	; 0x0e
	while(1)
	{
	    char flag1=1 , flag2=1; 
	    LCD_CLR();
	    LCD_moveCursor(1,2);
		LCD_sendString("enter the pass");
 92c:	0f 2e       	mov	r0, r31
 92e:	fd e8       	ldi	r31, 0x8D	; 141
 930:	2f 2e       	mov	r2, r31
 932:	f0 e0       	ldi	r31, 0x00	; 0
 934:	3f 2e       	mov	r3, r31
 936:	f0 2d       	mov	r31, r0
	setPinDIr('D',GREEN_LED,1);
	writePIn('D',RED_LED,1);             // Turn on red LED initially
	char arr1[PASSWORD_LENGTH] , arr2[PASSWORD_LENGTH] , val, tries = MAX_TRIES , checkIdenticalFlag=1;

// set the password for the first time 
label: if(EEPROM_read(STATUS_LOCATION) == NOTPRESSED)
 938:	80 e5       	ldi	r24, 0x50	; 80
 93a:	90 e0       	ldi	r25, 0x00	; 0
 93c:	0e 94 99 03 	call	0x732	; 0x732 <EEPROM_read>
 940:	8f 3f       	cpi	r24, 0xFF	; 255
 942:	09 f0       	breq	.+2      	; 0x946 <main+0xb0>
 944:	98 c0       	rjmp	.+304    	; 0xa76 <main+0x1e0>
#define PASSWORD_LENGTH 4




int main(void)
 946:	de 01       	movw	r26, r28
 948:	19 96       	adiw	r26, 0x09	; 9
 94a:	ba 87       	std	Y+10, r27	; 0x0a
 94c:	a9 87       	std	Y+9, r26	; 0x09
			{
				if(arr1[k]==arr2[k])
				{
					continue;
				}
				checkIdenticalFlag=0;
 94e:	99 24       	eor	r9, r9
// set the password for the first time 
label: if(EEPROM_read(STATUS_LOCATION) == NOTPRESSED)
       {
			do 
			{
				LCD_CLR();
 950:	0e 94 a0 06 	call	0xd40	; 0xd40 <LCD_CLR>
				LCD_moveCursor(1,3);
 954:	81 e0       	ldi	r24, 0x01	; 1
 956:	63 e0       	ldi	r22, 0x03	; 3
 958:	0e 94 92 06 	call	0xd24	; 0xd24 <LCD_moveCursor>
				LCD_sendString("set password");
 95c:	80 e6       	ldi	r24, 0x60	; 96
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_sendString>
				LCD_moveCursor(2,6);
 964:	82 e0       	ldi	r24, 0x02	; 2
 966:	66 e0       	ldi	r22, 0x06	; 6
 968:	0e 94 92 06 	call	0xd24	; 0xd24 <LCD_moveCursor>
 96c:	62 01       	movw	r12, r4
#define PASSWORD_LENGTH 4




int main(void)
 96e:	08 2d       	mov	r16, r8
 970:	17 2d       	mov	r17, r7
				
			// takes four digits from the user and store it in array 
			for(char i=0 ; i<PASSWORD_LENGTH ; i++)
			{
			  do {
				   arr1[i]= KEYPAD_getKey();
 972:	0e 94 c0 03 	call	0x780	; 0x780 <KEYPAD_getKey>
 976:	f8 01       	movw	r30, r16
 978:	80 83       	st	Z, r24
				 }while (arr1[i]== NOTPRESSED);
 97a:	8f 3f       	cpi	r24, 0xFF	; 255
 97c:	d1 f3       	breq	.-12     	; 0x972 <main+0xdc>
				   LCD_sendChar(arr1[i]);
 97e:	0e 94 67 06 	call	0xcce	; 0xcce <LCD_sendChar>
 982:	8f ef       	ldi	r24, 0xFF	; 255
 984:	92 e5       	ldi	r25, 0x52	; 82
 986:	a7 e0       	ldi	r26, 0x07	; 7
 988:	81 50       	subi	r24, 0x01	; 1
 98a:	90 40       	sbci	r25, 0x00	; 0
 98c:	a0 40       	sbci	r26, 0x00	; 0
 98e:	e1 f7       	brne	.-8      	; 0x988 <main+0xf2>
 990:	00 c0       	rjmp	.+0      	; 0x992 <main+0xfc>
 992:	00 00       	nop
				   _delay_ms(300);
				   LCD_sendCmd(SHIFT_CUR_LEFT);
 994:	80 e1       	ldi	r24, 0x10	; 16
 996:	0e 94 4b 06 	call	0xc96	; 0xc96 <LCD_sendCmd>
				   LCD_sendChar('*');
 99a:	8a e2       	ldi	r24, 0x2A	; 42
 99c:	0e 94 67 06 	call	0xcce	; 0xcce <LCD_sendChar>
 9a0:	0f 5f       	subi	r16, 0xFF	; 255
 9a2:	1f 4f       	sbci	r17, 0xFF	; 255
				LCD_sendString("set password");
				LCD_moveCursor(2,6);
				
				
			// takes four digits from the user and store it in array 
			for(char i=0 ; i<PASSWORD_LENGTH ; i++)
 9a4:	0a 15       	cp	r16, r10
 9a6:	1b 05       	cpc	r17, r11
 9a8:	21 f7       	brne	.-56     	; 0x972 <main+0xdc>
				   LCD_sendChar(arr1[i]);
				   _delay_ms(300);
				   LCD_sendCmd(SHIFT_CUR_LEFT);
				   LCD_sendChar('*');
			}	 
			LCD_CLR();
 9aa:	0e 94 a0 06 	call	0xd40	; 0xd40 <LCD_CLR>
			LCD_sendString("confirm the pass");
 9ae:	8d e6       	ldi	r24, 0x6D	; 109
 9b0:	90 e0       	ldi	r25, 0x00	; 0
 9b2:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_sendString>
			LCD_moveCursor(2,6);
 9b6:	82 e0       	ldi	r24, 0x02	; 2
 9b8:	66 e0       	ldi	r22, 0x06	; 6
 9ba:	0e 94 92 06 	call	0xd24	; 0xd24 <LCD_moveCursor>
 9be:	eb 84       	ldd	r14, Y+11	; 0x0b
 9c0:	fc 84       	ldd	r15, Y+12	; 0x0c
#define PASSWORD_LENGTH 4




int main(void)
 9c2:	0d 85       	ldd	r16, Y+13	; 0x0d
 9c4:	1e 85       	ldd	r17, Y+14	; 0x0e
			
		     // takes four digits for the second time and store in another array 
			for(char i=0 ; i<PASSWORD_LENGTH ; i++)
			{
				do {
			 		arr2[i]= KEYPAD_getKey();
 9c6:	0e 94 c0 03 	call	0x780	; 0x780 <KEYPAD_getKey>
 9ca:	d8 01       	movw	r26, r16
 9cc:	8c 93       	st	X, r24
				   }while (arr2[i]== NOTPRESSED);
 9ce:	8f 3f       	cpi	r24, 0xFF	; 255
 9d0:	d1 f3       	breq	.-12     	; 0x9c6 <main+0x130>
				LCD_sendChar(arr2[i]);
 9d2:	0e 94 67 06 	call	0xcce	; 0xcce <LCD_sendChar>
 9d6:	8f ef       	ldi	r24, 0xFF	; 255
 9d8:	92 e5       	ldi	r25, 0x52	; 82
 9da:	a7 e0       	ldi	r26, 0x07	; 7
 9dc:	81 50       	subi	r24, 0x01	; 1
 9de:	90 40       	sbci	r25, 0x00	; 0
 9e0:	a0 40       	sbci	r26, 0x00	; 0
 9e2:	e1 f7       	brne	.-8      	; 0x9dc <main+0x146>
 9e4:	00 c0       	rjmp	.+0      	; 0x9e6 <main+0x150>
 9e6:	00 00       	nop
				_delay_ms(300);
				LCD_sendCmd(SHIFT_CUR_LEFT);
 9e8:	80 e1       	ldi	r24, 0x10	; 16
 9ea:	0e 94 4b 06 	call	0xc96	; 0xc96 <LCD_sendCmd>
				LCD_sendChar('*');
 9ee:	8a e2       	ldi	r24, 0x2A	; 42
 9f0:	0e 94 67 06 	call	0xcce	; 0xcce <LCD_sendChar>
 9f4:	0f 5f       	subi	r16, 0xFF	; 255
 9f6:	1f 4f       	sbci	r17, 0xFF	; 255
			LCD_sendString("confirm the pass");
			LCD_moveCursor(2,6);
			
			
		     // takes four digits for the second time and store in another array 
			for(char i=0 ; i<PASSWORD_LENGTH ; i++)
 9f8:	a9 85       	ldd	r26, Y+9	; 0x09
 9fa:	ba 85       	ldd	r27, Y+10	; 0x0a
 9fc:	0a 17       	cp	r16, r26
 9fe:	1b 07       	cpc	r17, r27
 a00:	11 f7       	brne	.-60     	; 0x9c6 <main+0x130>
 a02:	e8 2d       	mov	r30, r8
 a04:	f7 2d       	mov	r31, r7
 a06:	21 e0       	ldi	r18, 0x01	; 1
 a08:	d7 01       	movw	r26, r14
			
			
			// check .. if two passwords are identical then store it in EEPROM 
			for(char k=0 ; k<PASSWORD_LENGTH ; k++)
			{
				if(arr1[k]==arr2[k])
 a0a:	91 91       	ld	r25, Z+
 a0c:	8d 91       	ld	r24, X+
 a0e:	98 13       	cpse	r25, r24
				{
					continue;
				}
				checkIdenticalFlag=0;
 a10:	29 2d       	mov	r18, r9
				LCD_sendChar('*');
			}
			
			
			// check .. if two passwords are identical then store it in EEPROM 
			for(char k=0 ; k<PASSWORD_LENGTH ; k++)
 a12:	ae 16       	cp	r10, r30
 a14:	bf 06       	cpc	r11, r31
 a16:	c9 f7       	brne	.-14     	; 0xa0a <main+0x174>
				{
					continue;
				}
				checkIdenticalFlag=0;
			}
			if(checkIdenticalFlag == 1)
 a18:	21 30       	cpi	r18, 0x01	; 1
 a1a:	99 f4       	brne	.+38     	; 0xa42 <main+0x1ac>
 a1c:	00 e2       	ldi	r16, 0x20	; 32
 a1e:	10 e0       	ldi	r17, 0x00	; 0
			{
				for (char c=0 ; c<PASSWORD_LENGTH ; c++)         // store the password in EEPROM 
				{
					EEPROM_write(START_ADRESS+c , arr1[c]);
 a20:	f6 01       	movw	r30, r12
 a22:	61 91       	ld	r22, Z+
 a24:	6f 01       	movw	r12, r30
 a26:	c8 01       	movw	r24, r16
 a28:	0e 94 89 03 	call	0x712	; 0x712 <EEPROM_write>
 a2c:	0f 5f       	subi	r16, 0xFF	; 255
 a2e:	1f 4f       	sbci	r17, 0xFF	; 255
				}
				checkIdenticalFlag=0;
			}
			if(checkIdenticalFlag == 1)
			{
				for (char c=0 ; c<PASSWORD_LENGTH ; c++)         // store the password in EEPROM 
 a30:	04 32       	cpi	r16, 0x24	; 36
 a32:	11 05       	cpc	r17, r1
 a34:	a9 f7       	brne	.-22     	; 0xa20 <main+0x18a>
				{
					EEPROM_write(START_ADRESS+c , arr1[c]);
				}
				EEPROM_write(STATUS_LOCATION,0x00);            // write anything accept 0xFF(default val) to avoid entering set-up again 
 a36:	80 e5       	ldi	r24, 0x50	; 80
 a38:	90 e0       	ldi	r25, 0x00	; 0
 a3a:	60 e0       	ldi	r22, 0x00	; 0
 a3c:	0e 94 89 03 	call	0x712	; 0x712 <EEPROM_write>
 a40:	13 c0       	rjmp	.+38     	; 0xa68 <main+0x1d2>
			}
			
			else
			{
				LCD_CLR();
 a42:	0e 94 a0 06 	call	0xd40	; 0xd40 <LCD_CLR>
				LCD_moveCursor(1,2);
 a46:	81 e0       	ldi	r24, 0x01	; 1
 a48:	62 e0       	ldi	r22, 0x02	; 2
 a4a:	0e 94 92 06 	call	0xd24	; 0xd24 <LCD_moveCursor>
				LCD_sendString("not identical!");
 a4e:	8e e7       	ldi	r24, 0x7E	; 126
 a50:	90 e0       	ldi	r25, 0x00	; 0
 a52:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_sendString>
 a56:	8f ef       	ldi	r24, 0xFF	; 255
 a58:	93 ed       	ldi	r25, 0xD3	; 211
 a5a:	a0 e3       	ldi	r26, 0x30	; 48
 a5c:	81 50       	subi	r24, 0x01	; 1
 a5e:	90 40       	sbci	r25, 0x00	; 0
 a60:	a0 40       	sbci	r26, 0x00	; 0
 a62:	e1 f7       	brne	.-8      	; 0xa5c <main+0x1c6>
 a64:	00 c0       	rjmp	.+0      	; 0xa66 <main+0x1d0>
 a66:	00 00       	nop
				checkIdenticalFlag=1;
				_delay_ms(2000);	
			}
		  }while (EEPROM_read(STATUS_LOCATION)==NOTPRESSED);     //if the passwords are not identical i will stay in the loop
 a68:	80 e5       	ldi	r24, 0x50	; 80
 a6a:	90 e0       	ldi	r25, 0x00	; 0
 a6c:	0e 94 99 03 	call	0x732	; 0x732 <EEPROM_read>
 a70:	8f 3f       	cpi	r24, 0xFF	; 255
 a72:	09 f4       	brne	.+2      	; 0xa76 <main+0x1e0>
 a74:	6d cf       	rjmp	.-294    	; 0x950 <main+0xba>
		{
			if(arr1[j]=='0')
			{
				continue;
			}
			flag2=0;
 a76:	99 24       	eor	r9, r9
	
	
	while(1)
	{
	    char flag1=1 , flag2=1; 
	    LCD_CLR();
 a78:	0e 94 a0 06 	call	0xd40	; 0xd40 <LCD_CLR>
	    LCD_moveCursor(1,2);
 a7c:	81 e0       	ldi	r24, 0x01	; 1
 a7e:	62 e0       	ldi	r22, 0x02	; 2
 a80:	0e 94 92 06 	call	0xd24	; 0xd24 <LCD_moveCursor>
		LCD_sendString("enter the pass");
 a84:	c1 01       	movw	r24, r2
 a86:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_sendString>
		LCD_moveCursor(2,6);
 a8a:	82 e0       	ldi	r24, 0x02	; 2
 a8c:	66 e0       	ldi	r22, 0x06	; 6
 a8e:	0e 94 92 06 	call	0xd24	; 0xd24 <LCD_moveCursor>
 a92:	62 01       	movw	r12, r4
#define PASSWORD_LENGTH 4




int main(void)
 a94:	08 2d       	mov	r16, r8
 a96:	17 2d       	mov	r17, r7
		
		// get the password from the user 
		for(char i=0 ; i<PASSWORD_LENGTH ; i++)
		{
		 do {
			   arr1[i]= KEYPAD_getKey();
 a98:	0e 94 c0 03 	call	0x780	; 0x780 <KEYPAD_getKey>
 a9c:	d8 01       	movw	r26, r16
 a9e:	8c 93       	st	X, r24
			}while (arr1[i]== NOTPRESSED);
 aa0:	8f 3f       	cpi	r24, 0xFF	; 255
 aa2:	d1 f3       	breq	.-12     	; 0xa98 <main+0x202>
			LCD_sendChar(arr1[i]);
 aa4:	0e 94 67 06 	call	0xcce	; 0xcce <LCD_sendChar>
 aa8:	8f ef       	ldi	r24, 0xFF	; 255
 aaa:	92 e5       	ldi	r25, 0x52	; 82
 aac:	a7 e0       	ldi	r26, 0x07	; 7
 aae:	81 50       	subi	r24, 0x01	; 1
 ab0:	90 40       	sbci	r25, 0x00	; 0
 ab2:	a0 40       	sbci	r26, 0x00	; 0
 ab4:	e1 f7       	brne	.-8      	; 0xaae <main+0x218>
 ab6:	00 c0       	rjmp	.+0      	; 0xab8 <main+0x222>
 ab8:	00 00       	nop
			_delay_ms(300);
			LCD_sendCmd(SHIFT_CUR_LEFT);
 aba:	80 e1       	ldi	r24, 0x10	; 16
 abc:	0e 94 4b 06 	call	0xc96	; 0xc96 <LCD_sendCmd>
			LCD_sendChar('*');
 ac0:	8a e2       	ldi	r24, 0x2A	; 42
 ac2:	0e 94 67 06 	call	0xcce	; 0xcce <LCD_sendChar>
 ac6:	0f 5f       	subi	r16, 0xFF	; 255
 ac8:	1f 4f       	sbci	r17, 0xFF	; 255
		LCD_sendString("enter the pass");
		LCD_moveCursor(2,6);
		
		
		// get the password from the user 
		for(char i=0 ; i<PASSWORD_LENGTH ; i++)
 aca:	0a 15       	cp	r16, r10
 acc:	1b 05       	cpc	r17, r11
 ace:	21 f7       	brne	.-56     	; 0xa98 <main+0x202>
 ad0:	e8 2d       	mov	r30, r8
 ad2:	f7 2d       	mov	r31, r7
 ad4:	91 e0       	ldi	r25, 0x01	; 1
		
		
		// check .. if the user entered n zeros so it will go to set-up stage 
		for(char j=0 ; j<PASSWORD_LENGTH ; j++)
		{
			if(arr1[j]=='0')
 ad6:	81 91       	ld	r24, Z+
 ad8:	80 33       	cpi	r24, 0x30	; 48
 ada:	09 f0       	breq	.+2      	; 0xade <main+0x248>
			{
				continue;
			}
			flag2=0;
 adc:	99 2d       	mov	r25, r9
			
		}
		
		
		// check .. if the user entered n zeros so it will go to set-up stage 
		for(char j=0 ; j<PASSWORD_LENGTH ; j++)
 ade:	ae 16       	cp	r10, r30
 ae0:	bf 06       	cpc	r11, r31
 ae2:	c9 f7       	brne	.-14     	; 0xad6 <main+0x240>
				continue;
			}
			flag2=0;
			
		}
		if (flag2==1)
 ae4:	91 30       	cpi	r25, 0x01	; 1
 ae6:	31 f4       	brne	.+12     	; 0xaf4 <main+0x25e>
		{
			EEPROM_write(STATUS_LOCATION,NOTPRESSED);
 ae8:	80 e5       	ldi	r24, 0x50	; 80
 aea:	90 e0       	ldi	r25, 0x00	; 0
 aec:	6f ef       	ldi	r22, 0xFF	; 255
 aee:	0e 94 89 03 	call	0x712	; 0x712 <EEPROM_write>
			goto label;
 af2:	22 cf       	rjmp	.-444    	; 0x938 <main+0xa2>
				continue;
			}
			flag2=0;
			
		}
		if (flag2==1)
 af4:	ee 24       	eor	r14, r14
 af6:	ff 24       	eor	r15, r15
 af8:	68 94       	set
 afa:	e5 f8       	bld	r14, 5
		
		// check if the password is correct or not 	
		for(char i=0 ; i<PASSWORD_LENGTH ; i++)
		{
			
			if (arr1[i] != EEPROM_read(START_ADRESS+i))
 afc:	d6 01       	movw	r26, r12
 afe:	1d 91       	ld	r17, X+
 b00:	6d 01       	movw	r12, r26
 b02:	c7 01       	movw	r24, r14
 b04:	0e 94 99 03 	call	0x732	; 0x732 <EEPROM_read>
 b08:	18 17       	cp	r17, r24
 b0a:	79 f1       	breq	.+94     	; 0xb6a <main+0x2d4>
			{
				LCD_CLR();
 b0c:	0e 94 a0 06 	call	0xd40	; 0xd40 <LCD_CLR>
				LCD_moveCursor(1,3);
 b10:	81 e0       	ldi	r24, 0x01	; 1
 b12:	63 e0       	ldi	r22, 0x03	; 3
 b14:	0e 94 92 06 	call	0xd24	; 0xd24 <LCD_moveCursor>
				LCD_sendString("wrong pass !");
 b18:	8c e9       	ldi	r24, 0x9C	; 156
 b1a:	90 e0       	ldi	r25, 0x00	; 0
 b1c:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_sendString>
 b20:	8f ef       	ldi	r24, 0xFF	; 255
 b22:	99 e6       	ldi	r25, 0x69	; 105
 b24:	a8 e1       	ldi	r26, 0x18	; 24
 b26:	81 50       	subi	r24, 0x01	; 1
 b28:	90 40       	sbci	r25, 0x00	; 0
 b2a:	a0 40       	sbci	r26, 0x00	; 0
 b2c:	e1 f7       	brne	.-8      	; 0xb26 <main+0x290>
 b2e:	00 c0       	rjmp	.+0      	; 0xb30 <main+0x29a>
 b30:	00 00       	nop
				_delay_ms(1000);
				tries--;                                     // if pass is incorrect you will lose one try  
 b32:	6a 94       	dec	r6
				LCD_CLR();
 b34:	0e 94 a0 06 	call	0xd40	; 0xd40 <LCD_CLR>
				LCD_moveCursor(1,3);
 b38:	81 e0       	ldi	r24, 0x01	; 1
 b3a:	63 e0       	ldi	r22, 0x03	; 3
 b3c:	0e 94 92 06 	call	0xd24	; 0xd24 <LCD_moveCursor>
				LCD_sendChar(tries+48);
 b40:	86 2d       	mov	r24, r6
 b42:	80 5d       	subi	r24, 0xD0	; 208
 b44:	0e 94 67 06 	call	0xcce	; 0xcce <LCD_sendChar>
				LCD_sendString(" tries left");
 b48:	89 ea       	ldi	r24, 0xA9	; 169
 b4a:	90 e0       	ldi	r25, 0x00	; 0
 b4c:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_sendString>
 b50:	8f ef       	ldi	r24, 0xFF	; 255
 b52:	93 ed       	ldi	r25, 0xD3	; 211
 b54:	a0 e3       	ldi	r26, 0x30	; 48
 b56:	81 50       	subi	r24, 0x01	; 1
 b58:	90 40       	sbci	r25, 0x00	; 0
 b5a:	a0 40       	sbci	r26, 0x00	; 0
 b5c:	e1 f7       	brne	.-8      	; 0xb56 <main+0x2c0>
 b5e:	00 c0       	rjmp	.+0      	; 0xb60 <main+0x2ca>
 b60:	00 00       	nop
		/* 
		verify that the user has not entered the pass incorrectly three times .. if the user entered it three times incorrectly 
		will wait for 9 seconds and then try again 
		*/
		
		if(tries==0)
 b62:	66 20       	and	r6, r6
 b64:	09 f0       	breq	.+2      	; 0xb68 <main+0x2d2>
 b66:	88 cf       	rjmp	.-240    	; 0xa78 <main+0x1e2>
 b68:	08 c0       	rjmp	.+16     	; 0xb7a <main+0x2e4>
 b6a:	08 94       	sec
 b6c:	e1 1c       	adc	r14, r1
 b6e:	f1 1c       	adc	r15, r1
			goto label;
		}
		
		
		// check if the password is correct or not 	
		for(char i=0 ; i<PASSWORD_LENGTH ; i++)
 b70:	94 e2       	ldi	r25, 0x24	; 36
 b72:	e9 16       	cp	r14, r25
 b74:	f1 04       	cpc	r15, r1
 b76:	11 f6       	brne	.-124    	; 0xafc <main+0x266>
 b78:	26 c0       	rjmp	.+76     	; 0xbc6 <main+0x330>
		will wait for 9 seconds and then try again 
		*/
		
		if(tries==0)
		{
			LCD_CLR();
 b7a:	0e 94 a0 06 	call	0xd40	; 0xd40 <LCD_CLR>
			LCD_moveCursor(1,7);
 b7e:	81 e0       	ldi	r24, 0x01	; 1
 b80:	67 e0       	ldi	r22, 0x07	; 7
 b82:	0e 94 92 06 	call	0xd24	; 0xd24 <LCD_moveCursor>
			LCD_sendString("wait");
 b86:	85 eb       	ldi	r24, 0xB5	; 181
 b88:	90 e0       	ldi	r25, 0x00	; 0
 b8a:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_sendString>
			LCD_moveCursor(2,8);
 b8e:	82 e0       	ldi	r24, 0x02	; 2
 b90:	68 e0       	ldi	r22, 0x08	; 8
 b92:	0e 94 92 06 	call	0xd24	; 0xd24 <LCD_moveCursor>
 b96:	19 e3       	ldi	r17, 0x39	; 57
			for(char i=9 ; i>0 ; i--)
			{
				LCD_sendChar(i+48);
 b98:	81 2f       	mov	r24, r17
 b9a:	0e 94 67 06 	call	0xcce	; 0xcce <LCD_sendChar>
 b9e:	8f ef       	ldi	r24, 0xFF	; 255
 ba0:	99 e6       	ldi	r25, 0x69	; 105
 ba2:	a8 e1       	ldi	r26, 0x18	; 24
 ba4:	81 50       	subi	r24, 0x01	; 1
 ba6:	90 40       	sbci	r25, 0x00	; 0
 ba8:	a0 40       	sbci	r26, 0x00	; 0
 baa:	e1 f7       	brne	.-8      	; 0xba4 <main+0x30e>
 bac:	00 c0       	rjmp	.+0      	; 0xbae <main+0x318>
 bae:	00 00       	nop
				_delay_ms(1000);
				LCD_sendCmd(SHIFT_CUR_LEFT);
 bb0:	80 e1       	ldi	r24, 0x10	; 16
 bb2:	0e 94 4b 06 	call	0xc96	; 0xc96 <LCD_sendCmd>
 bb6:	11 50       	subi	r17, 0x01	; 1
		{
			LCD_CLR();
			LCD_moveCursor(1,7);
			LCD_sendString("wait");
			LCD_moveCursor(2,8);
			for(char i=9 ; i>0 ; i--)
 bb8:	10 33       	cpi	r17, 0x30	; 48
 bba:	71 f7       	brne	.-36     	; 0xb98 <main+0x302>
			{
				LCD_sendChar(i+48);
				_delay_ms(1000);
				LCD_sendCmd(SHIFT_CUR_LEFT);
			}
			tries = MAX_TRIES;                            // reset the tries 
 bbc:	0f 2e       	mov	r0, r31
 bbe:	f3 e0       	ldi	r31, 0x03	; 3
 bc0:	6f 2e       	mov	r6, r31
 bc2:	f0 2d       	mov	r31, r0
 bc4:	59 cf       	rjmp	.-334    	; 0xa78 <main+0x1e2>
		*/
		
		// if flag equal one the safe will open 
		if (flag1==1)
		{
			writePIn('D',RED_LED,0);               // turn off the red led 
 bc6:	84 e4       	ldi	r24, 0x44	; 68
 bc8:	90 e0       	ldi	r25, 0x00	; 0
 bca:	60 e0       	ldi	r22, 0x00	; 0
 bcc:	70 e0       	ldi	r23, 0x00	; 0
 bce:	40 e0       	ldi	r20, 0x00	; 0
 bd0:	50 e0       	ldi	r21, 0x00	; 0
 bd2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <writePIn>
			writePIn('D',GREEN_LED,1);             // turn on the green led
 bd6:	84 e4       	ldi	r24, 0x44	; 68
 bd8:	90 e0       	ldi	r25, 0x00	; 0
 bda:	61 e0       	ldi	r22, 0x01	; 1
 bdc:	70 e0       	ldi	r23, 0x00	; 0
 bde:	41 e0       	ldi	r20, 0x01	; 1
 be0:	50 e0       	ldi	r21, 0x00	; 0
 be2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <writePIn>
			LCD_CLR();
 be6:	0e 94 a0 06 	call	0xd40	; 0xd40 <LCD_CLR>
			LCD_moveCursor(1,4);
 bea:	81 e0       	ldi	r24, 0x01	; 1
 bec:	64 e0       	ldi	r22, 0x04	; 4
 bee:	0e 94 92 06 	call	0xd24	; 0xd24 <LCD_moveCursor>
			LCD_sendString("verified..");
 bf2:	8a eb       	ldi	r24, 0xBA	; 186
 bf4:	90 e0       	ldi	r25, 0x00	; 0
 bf6:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_sendString>
 bfa:	8f ef       	ldi	r24, 0xFF	; 255
 bfc:	93 ed       	ldi	r25, 0xD3	; 211
 bfe:	a0 e3       	ldi	r26, 0x30	; 48
 c00:	81 50       	subi	r24, 0x01	; 1
 c02:	90 40       	sbci	r25, 0x00	; 0
 c04:	a0 40       	sbci	r26, 0x00	; 0
 c06:	e1 f7       	brne	.-8      	; 0xc00 <main+0x36a>
 c08:	00 c0       	rjmp	.+0      	; 0xc0a <main+0x374>
 c0a:	00 00       	nop
			_delay_ms(2000);
			LCD_CLR();
 c0c:	0e 94 a0 06 	call	0xd40	; 0xd40 <LCD_CLR>
			LCD_moveCursor(1,3);
 c10:	81 e0       	ldi	r24, 0x01	; 1
 c12:	63 e0       	ldi	r22, 0x03	; 3
 c14:	0e 94 92 06 	call	0xd24	; 0xd24 <LCD_moveCursor>
			LCD_sendString("safe opened");
 c18:	85 ec       	ldi	r24, 0xC5	; 197
 c1a:	90 e0       	ldi	r25, 0x00	; 0
 c1c:	0e 94 83 06 	call	0xd06	; 0xd06 <LCD_sendString>
 c20:	8f ef       	ldi	r24, 0xFF	; 255
 c22:	93 ed       	ldi	r25, 0xD3	; 211
 c24:	a0 e3       	ldi	r26, 0x30	; 48
 c26:	81 50       	subi	r24, 0x01	; 1
 c28:	90 40       	sbci	r25, 0x00	; 0
 c2a:	a0 40       	sbci	r26, 0x00	; 0
 c2c:	e1 f7       	brne	.-8      	; 0xc26 <main+0x390>
 c2e:	00 c0       	rjmp	.+0      	; 0xc30 <main+0x39a>
 c30:	00 00       	nop
			}
			tries = MAX_TRIES;                            // reset the tries 
		}				
		
	}
 c32:	80 e0       	ldi	r24, 0x00	; 0
 c34:	90 e0       	ldi	r25, 0x00	; 0
 c36:	2e 96       	adiw	r28, 0x0e	; 14
 c38:	0f b6       	in	r0, 0x3f	; 63
 c3a:	f8 94       	cli
 c3c:	de bf       	out	0x3e, r29	; 62
 c3e:	0f be       	out	0x3f, r0	; 63
 c40:	cd bf       	out	0x3d, r28	; 61
 c42:	df 91       	pop	r29
 c44:	cf 91       	pop	r28
 c46:	1f 91       	pop	r17
 c48:	0f 91       	pop	r16
 c4a:	ff 90       	pop	r15
 c4c:	ef 90       	pop	r14
 c4e:	df 90       	pop	r13
 c50:	cf 90       	pop	r12
 c52:	bf 90       	pop	r11
 c54:	af 90       	pop	r10
 c56:	9f 90       	pop	r9
 c58:	8f 90       	pop	r8
 c5a:	7f 90       	pop	r7
 c5c:	6f 90       	pop	r6
 c5e:	5f 90       	pop	r5
 c60:	4f 90       	pop	r4
 c62:	3f 90       	pop	r3
 c64:	2f 90       	pop	r2
 c66:	08 95       	ret

00000c68 <LCD_pulseEnable>:

//--------------------------------------------------------------------------------------------------------------------------------

void LCD_pulseEnable (void)
{
	writePIn(LCD_CONTROL_PORT,EN,1);
 c68:	82 e4       	ldi	r24, 0x42	; 66
 c6a:	66 e0       	ldi	r22, 0x06	; 6
 c6c:	41 e0       	ldi	r20, 0x01	; 1
 c6e:	0e 94 da 00 	call	0x1b4	; 0x1b4 <writePIn>
 c72:	8f e9       	ldi	r24, 0x9F	; 159
 c74:	9f e0       	ldi	r25, 0x0F	; 15
 c76:	01 97       	sbiw	r24, 0x01	; 1
 c78:	f1 f7       	brne	.-4      	; 0xc76 <LCD_pulseEnable+0xe>
 c7a:	00 c0       	rjmp	.+0      	; 0xc7c <LCD_pulseEnable+0x14>
 c7c:	00 00       	nop
	_delay_ms(2);
	writePIn(LCD_CONTROL_PORT,EN,0);
 c7e:	82 e4       	ldi	r24, 0x42	; 66
 c80:	66 e0       	ldi	r22, 0x06	; 6
 c82:	40 e0       	ldi	r20, 0x00	; 0
 c84:	0e 94 da 00 	call	0x1b4	; 0x1b4 <writePIn>
 c88:	8f e9       	ldi	r24, 0x9F	; 159
 c8a:	9f e0       	ldi	r25, 0x0F	; 15
 c8c:	01 97       	sbiw	r24, 0x01	; 1
 c8e:	f1 f7       	brne	.-4      	; 0xc8c <LCD_pulseEnable+0x24>
 c90:	00 c0       	rjmp	.+0      	; 0xc92 <LCD_pulseEnable+0x2a>
 c92:	00 00       	nop
	_delay_ms(2);
}
 c94:	08 95       	ret

00000c96 <LCD_sendCmd>:
}

//--------------------------------------------------------------------------------------------------------------------------------

void LCD_sendCmd (char cmd)
{
 c96:	cf 93       	push	r28
 c98:	c8 2f       	mov	r28, r24
	 writePort(LCD_DATA_PORT ,cmd);
	 writePIn(LCD_CONTROL_PORT,RS,0);
	 LCD_pulseEnable();
	 
	#else
	writeLowNibble(LCD_DATA_PORT ,cmd>>4);
 c9a:	68 2f       	mov	r22, r24
 c9c:	62 95       	swap	r22
 c9e:	6f 70       	andi	r22, 0x0F	; 15
 ca0:	82 e4       	ldi	r24, 0x42	; 66
 ca2:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <writeLowNibble>
	writePIn(LCD_CONTROL_PORT,RS,0);
 ca6:	82 e4       	ldi	r24, 0x42	; 66
 ca8:	64 e0       	ldi	r22, 0x04	; 4
 caa:	40 e0       	ldi	r20, 0x00	; 0
 cac:	0e 94 da 00 	call	0x1b4	; 0x1b4 <writePIn>
	LCD_pulseEnable();
 cb0:	0e 94 34 06 	call	0xc68	; 0xc68 <LCD_pulseEnable>
	writeLowNibble(LCD_DATA_PORT ,cmd);
 cb4:	82 e4       	ldi	r24, 0x42	; 66
 cb6:	6c 2f       	mov	r22, r28
 cb8:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <writeLowNibble>
	writePIn(LCD_CONTROL_PORT,RS,0);
 cbc:	82 e4       	ldi	r24, 0x42	; 66
 cbe:	64 e0       	ldi	r22, 0x04	; 4
 cc0:	40 e0       	ldi	r20, 0x00	; 0
 cc2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <writePIn>
	LCD_pulseEnable();
 cc6:	0e 94 34 06 	call	0xc68	; 0xc68 <LCD_pulseEnable>
	#endif
}
 cca:	cf 91       	pop	r28
 ccc:	08 95       	ret

00000cce <LCD_sendChar>:
}

//--------------------------------------------------------------------------------------------------------------------------------

void LCD_sendChar (char data)
{
 cce:	cf 93       	push	r28
 cd0:	c8 2f       	mov	r28, r24
	writePort(LCD_DATA_PORT ,data);
	writePIn(LCD_CONTROL_PORT,RS,1);
	LCD_pulseEnable();
	
	#else
	writeLowNibble(LCD_DATA_PORT ,data>>4);
 cd2:	68 2f       	mov	r22, r24
 cd4:	62 95       	swap	r22
 cd6:	6f 70       	andi	r22, 0x0F	; 15
 cd8:	82 e4       	ldi	r24, 0x42	; 66
 cda:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <writeLowNibble>
	writePIn(LCD_CONTROL_PORT,RS,1);
 cde:	82 e4       	ldi	r24, 0x42	; 66
 ce0:	64 e0       	ldi	r22, 0x04	; 4
 ce2:	41 e0       	ldi	r20, 0x01	; 1
 ce4:	0e 94 da 00 	call	0x1b4	; 0x1b4 <writePIn>
	LCD_pulseEnable();
 ce8:	0e 94 34 06 	call	0xc68	; 0xc68 <LCD_pulseEnable>
	writeLowNibble(LCD_DATA_PORT ,data);
 cec:	82 e4       	ldi	r24, 0x42	; 66
 cee:	6c 2f       	mov	r22, r28
 cf0:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <writeLowNibble>
	writePIn(LCD_CONTROL_PORT,RS,1);
 cf4:	82 e4       	ldi	r24, 0x42	; 66
 cf6:	64 e0       	ldi	r22, 0x04	; 4
 cf8:	41 e0       	ldi	r20, 0x01	; 1
 cfa:	0e 94 da 00 	call	0x1b4	; 0x1b4 <writePIn>
	LCD_pulseEnable();
 cfe:	0e 94 34 06 	call	0xc68	; 0xc68 <LCD_pulseEnable>
	#endif
}
 d02:	cf 91       	pop	r28
 d04:	08 95       	ret

00000d06 <LCD_sendString>:
}

//--------------------------------------------------------------------------------------------------------------------------------

void LCD_sendString(char* str)
{
 d06:	cf 93       	push	r28
 d08:	df 93       	push	r29
 d0a:	ec 01       	movw	r28, r24
	int i=0;
	while (str[i]!='\0')
 d0c:	88 81       	ld	r24, Y
 d0e:	88 23       	and	r24, r24
 d10:	31 f0       	breq	.+12     	; 0xd1e <LCD_sendString+0x18>
	#endif
}

//--------------------------------------------------------------------------------------------------------------------------------

void LCD_sendString(char* str)
 d12:	21 96       	adiw	r28, 0x01	; 1
{
	int i=0;
	while (str[i]!='\0')
	{
		LCD_sendChar(str[i]);
 d14:	0e 94 67 06 	call	0xcce	; 0xcce <LCD_sendChar>
//--------------------------------------------------------------------------------------------------------------------------------

void LCD_sendString(char* str)
{
	int i=0;
	while (str[i]!='\0')
 d18:	89 91       	ld	r24, Y+
 d1a:	88 23       	and	r24, r24
 d1c:	d9 f7       	brne	.-10     	; 0xd14 <LCD_sendString+0xe>
	{
		LCD_sendChar(str[i]);
		i++;
	}
}
 d1e:	df 91       	pop	r29
 d20:	cf 91       	pop	r28
 d22:	08 95       	ret

00000d24 <LCD_moveCursor>:

//--------------------------------------------------------------------------------------------------------------------------------

void LCD_moveCursor (char row , char col)
{
	if (row == 1)
 d24:	81 30       	cpi	r24, 0x01	; 1
 d26:	29 f4       	brne	.+10     	; 0xd32 <LCD_moveCursor+0xe>
	{
		LCD_sendCmd(0x80+(col-1));
 d28:	86 2f       	mov	r24, r22
 d2a:	81 58       	subi	r24, 0x81	; 129
 d2c:	0e 94 4b 06 	call	0xc96	; 0xc96 <LCD_sendCmd>
 d30:	08 95       	ret
	}
	else if (row==2)
 d32:	82 30       	cpi	r24, 0x02	; 2
 d34:	21 f4       	brne	.+8      	; 0xd3e <LCD_moveCursor+0x1a>
	{
		LCD_sendCmd(0xC0+(col-1));
 d36:	86 2f       	mov	r24, r22
 d38:	81 54       	subi	r24, 0x41	; 65
 d3a:	0e 94 4b 06 	call	0xc96	; 0xc96 <LCD_sendCmd>
 d3e:	08 95       	ret

00000d40 <LCD_CLR>:

//--------------------------------------------------------------------------------------------------------------------------------

void LCD_CLR(void)
{
	LCD_sendCmd(CLRSCR);
 d40:	81 e0       	ldi	r24, 0x01	; 1
 d42:	0e 94 4b 06 	call	0xc96	; 0xc96 <LCD_sendCmd>
 d46:	8f e1       	ldi	r24, 0x1F	; 31
 d48:	9e e4       	ldi	r25, 0x4E	; 78
 d4a:	01 97       	sbiw	r24, 0x01	; 1
 d4c:	f1 f7       	brne	.-4      	; 0xd4a <LCD_CLR+0xa>
 d4e:	00 c0       	rjmp	.+0      	; 0xd50 <LCD_CLR+0x10>
 d50:	00 00       	nop
	_delay_ms(10);
}
 d52:	08 95       	ret

00000d54 <LCD_init>:
 d54:	8f ef       	ldi	r24, 0xFF	; 255
 d56:	91 ee       	ldi	r25, 0xE1	; 225
 d58:	a4 e0       	ldi	r26, 0x04	; 4
 d5a:	81 50       	subi	r24, 0x01	; 1
 d5c:	90 40       	sbci	r25, 0x00	; 0
 d5e:	a0 40       	sbci	r26, 0x00	; 0
 d60:	e1 f7       	brne	.-8      	; 0xd5a <LCD_init+0x6>
 d62:	00 c0       	rjmp	.+0      	; 0xd64 <LCD_init+0x10>
 d64:	00 00       	nop
	 LCD_sendCmd(ENTRY_MODE);     
	 _delay_ms(1);
	 
	#else
	_delay_ms(200);
	setLowNibbleDir(LCD_DATA_PORT ,0xF);
 d66:	82 e4       	ldi	r24, 0x42	; 66
 d68:	6f e0       	ldi	r22, 0x0F	; 15
 d6a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <setLowNibbleDir>
	setPinDIr(LCD_CONTROL_PORT,RS,1);
 d6e:	82 e4       	ldi	r24, 0x42	; 66
 d70:	64 e0       	ldi	r22, 0x04	; 4
 d72:	41 e0       	ldi	r20, 0x01	; 1
 d74:	0e 94 49 00 	call	0x92	; 0x92 <setPinDIr>
	setPinDIr(LCD_CONTROL_PORT,RW,1);
 d78:	82 e4       	ldi	r24, 0x42	; 66
 d7a:	65 e0       	ldi	r22, 0x05	; 5
 d7c:	41 e0       	ldi	r20, 0x01	; 1
 d7e:	0e 94 49 00 	call	0x92	; 0x92 <setPinDIr>
	setPinDIr(LCD_CONTROL_PORT,EN,1);
 d82:	82 e4       	ldi	r24, 0x42	; 66
 d84:	66 e0       	ldi	r22, 0x06	; 6
 d86:	41 e0       	ldi	r20, 0x01	; 1
 d88:	0e 94 49 00 	call	0x92	; 0x92 <setPinDIr>
	writePIn(LCD_CONTROL_PORT,RW,0);
 d8c:	82 e4       	ldi	r24, 0x42	; 66
 d8e:	65 e0       	ldi	r22, 0x05	; 5
 d90:	40 e0       	ldi	r20, 0x00	; 0
 d92:	0e 94 da 00 	call	0x1b4	; 0x1b4 <writePIn>
	LCD_sendCmd(HOME);      
 d96:	82 e0       	ldi	r24, 0x02	; 2
 d98:	0e 94 4b 06 	call	0xc96	; 0xc96 <LCD_sendCmd>
 d9c:	af ec       	ldi	r26, 0xCF	; 207
 d9e:	b7 e0       	ldi	r27, 0x07	; 7
 da0:	11 97       	sbiw	r26, 0x01	; 1
 da2:	f1 f7       	brne	.-4      	; 0xda0 <LCD_init+0x4c>
 da4:	00 c0       	rjmp	.+0      	; 0xda6 <LCD_init+0x52>
 da6:	00 00       	nop
	_delay_ms(1);
	LCD_sendCmd(FOUR_BITS);    
 da8:	88 e2       	ldi	r24, 0x28	; 40
 daa:	0e 94 4b 06 	call	0xc96	; 0xc96 <LCD_sendCmd>
 dae:	8f ec       	ldi	r24, 0xCF	; 207
 db0:	97 e0       	ldi	r25, 0x07	; 7
 db2:	01 97       	sbiw	r24, 0x01	; 1
 db4:	f1 f7       	brne	.-4      	; 0xdb2 <LCD_init+0x5e>
 db6:	00 c0       	rjmp	.+0      	; 0xdb8 <LCD_init+0x64>
 db8:	00 00       	nop
	_delay_ms(1);           
	LCD_sendCmd(DISP_ON_CUR_OFF);     
 dba:	8c e0       	ldi	r24, 0x0C	; 12
 dbc:	0e 94 4b 06 	call	0xc96	; 0xc96 <LCD_sendCmd>
 dc0:	af ec       	ldi	r26, 0xCF	; 207
 dc2:	b7 e0       	ldi	r27, 0x07	; 7
 dc4:	11 97       	sbiw	r26, 0x01	; 1
 dc6:	f1 f7       	brne	.-4      	; 0xdc4 <LCD_init+0x70>
 dc8:	00 c0       	rjmp	.+0      	; 0xdca <LCD_init+0x76>
 dca:	00 00       	nop
	_delay_ms(1);
	LCD_CLR();          
 dcc:	0e 94 a0 06 	call	0xd40	; 0xd40 <LCD_CLR>
	LCD_sendCmd(ENTRY_MODE);    
 dd0:	86 e0       	ldi	r24, 0x06	; 6
 dd2:	0e 94 4b 06 	call	0xc96	; 0xc96 <LCD_sendCmd>
 dd6:	8f ec       	ldi	r24, 0xCF	; 207
 dd8:	97 e0       	ldi	r25, 0x07	; 7
 dda:	01 97       	sbiw	r24, 0x01	; 1
 ddc:	f1 f7       	brne	.-4      	; 0xdda <LCD_init+0x86>
 dde:	00 c0       	rjmp	.+0      	; 0xde0 <LCD_init+0x8c>
 de0:	00 00       	nop
	_delay_ms(1);
	#endif
}
 de2:	08 95       	ret

00000de4 <_exit>:
 de4:	f8 94       	cli

00000de6 <__stop_program>:
 de6:	ff cf       	rjmp	.-2      	; 0xde6 <__stop_program>
